---
groups:
- name: Overview
  jobs:
  - Trigger Deployment
  - Action Scheduler
  - Action Worker
  - Case API
  - Case Processor
  - Event Latency Monitor
  - Exception Manager
  - Fieldwork Adapter
  - Notify Processor
  - Print File Service
  - PubSub Service
  - Rabbit Monitor
  - Toolbox
  - UAC QID Service
  - Report Deployment Success
  - Trigger Performance Tests
  - Scale Down Apps
  - Reset DB
  - Scale Up Apps
  - Performance Tests
  - Trigger Terraform
  - Run Terraform
  - Run Rabbit Helm
  - Report Terraform Success

- name: Manual Triggers
  jobs:
  - Trigger Deployment
  - Trigger Performance Tests
  - Trigger Terraform

- name: Terraform
  jobs:
  - Trigger Terraform
  - Run Terraform
  - Run Rabbit Helm
  - Report Terraform Success

- name: Deployments
  jobs:
  - Trigger Deployment
  - Action Scheduler
  - Action Worker
  - Case API
  - Case Processor
  - Event Latency Monitor
  - Exception Manager
  - Fieldwork Adapter
  - Notify Processor
  - Print File Service
  - PubSub Service
  - Rabbit Monitor
  - Toolbox
  - UAC QID Service
  - Report Deployment Success
  
- name: Performance Tests
  jobs:
  - Trigger Performance Tests
  - Scale Down Apps
  - Reset DB
  - Scale Up Apps
  - Performance Tests

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-release
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [release/*]
    branch: master

- name: every-minute
  type: time
  source:
    interval: 1m

- name: performance-tests-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-performance-tests.git
    paths: [kubernetes.env, tasks/*]
    private_key: ((github.service_account_private_key))

- name: performance-tests-docker-image
  type: docker-image
  source:
    repository: ((performance-tests-image))
    username: _json_key
    password: ((gcp.service_account_json))

- name: census-rm-terraform
  type: git
  source:
    branch: ((terraform-branch))
    uri: git@github.com:ONSdigital/census-rm-terraform.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-dependencies-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [dependencies/*, rabbitmq/*, setup-dependencies.sh]

templating:

slack_release_failure: &slack_release_failure
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_release_success: &slack_release_success
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "((performance-gcp-project-name)) release succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "((performance-gcp-project-name)) Release Succeeded",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  }, 
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#36a64f"
          }
      ]

slack_release_in_progress: &slack_release_in_progress
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "((performance-gcp-project-name)) release started. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "((performance-gcp-project-name)) Release Started",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },  
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#ffe100"
          }
      ]

slack_performance_tests_failure: &slack_performance_tests_failure
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "Performance tests failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_performance_setup_failure: &slack_performance_setup_failure
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "Performance tests setup failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_performance_tests_finished: &slack_performance_tests_finished
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "Performance tests finished. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "Performance tests finished",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#36a64f"
          }
      ]

slack_performance_tests_started: &slack_performance_tests_started
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "Performance tests run started. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "Performance Tests Started",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#ffe100"
          }
      ]

slack_terraform_success: &slack_terraform_success
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "((performance-gcp-project-name)) Terraform succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "((performance-gcp-project-name)) Terraform Succeeded",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((performance-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#36a64f"
          }
      ]


jobs:

- name: "Trigger Deployment"
  serial: true
  plan:
    - get: every-minute
    - get: census-rm-kubernetes-release
  on_success: *slack_release_in_progress

- name: "Action Scheduler"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-scheduler]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Action Worker"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-worker]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-worker
      KUBERNETES_SELECTOR: app=action-worker
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-worker
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Case API"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-api]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Case Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-processor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "UAC QID Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [uac-qid-service]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "PubSub Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [pubsubsvc]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Print File Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [print-file-service]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Fieldwork Adapter"
  disable_manual_trigger: true
  serial: true
  serial_groups: [fieldwork-adapter]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Notify Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [notify-processor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Exception Manager"
  disable_manual_trigger: true
  serial: true
  serial_groups: [exception-manager]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Toolbox"
  disable_manual_trigger: true
  serial: true
  serial_groups: [toolbox]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Event Latency Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [event-latency-monitor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: eventlatencymonitor
      KUBERNETES_SELECTOR: app=eventlatencymonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: eventlatencymonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Rabbit Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [rabbitmonitor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Trigger Deployment"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Trigger Deployment"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_release_failure
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Report Deployment Success"
  disable_manual_trigger: true
  serial: true
  plan:
  - get: every-minute
    trigger: true
    passed: [
      "Action Scheduler",
      "Action Worker",
      "Case API",
      "Case Processor",
      "UAC QID Service",
      "PubSub Service",
      "Print File Service",
      "Fieldwork Adapter",
      "Notify Processor",
      "Exception Manager",
      "Toolbox",
      "Event Latency Monitor",
      "Rabbit Monitor"]
  - *slack_release_success

- name: "Trigger Performance Tests"
  serial: true
  serial_groups: [
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
  - *slack_performance_tests_started

- name: "Scale Down Apps"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: ["Trigger Performance Tests"]
  - task: "Scale down pre ground zero"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
        CASE_PROCESSOR_REPLICAS: ((case-processor-replicas))
        UAC_QID_REPLICAS: ((uac-qid-replicas))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Scale apps down
            kubectl scale deployment action-scheduler --replicas=0
            kubectl scale deployment action-worker --replicas=0
            kubectl scale deployment case-api --replicas=0
            kubectl scale deployment case-processor --replicas=0
            kubectl scale deployment uacqidservice --replicas=0
  on_failure: *slack_performance_setup_failure

- name: "Reset DB"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: ["Scale Down Apps"]
  - task: "Wipe DB and rebuild from ground zero"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
        CASE_PROCESSOR_REPLICAS: ((case-processor-replicas))
        UAC_QID_REPLICAS: ((uac-qid-replicas))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Wipe and rebuild database
            kubectl exec $(kubectl get pods --selector=app=census-rm-toolbox -o jsonpath='{.items[*].metadata.name}') -- /bin/bash /app/groundzero/rebuild_from_ground_zero.sh
  on_failure: *slack_performance_setup_failure

- name: "Scale Up Apps"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: ["Reset DB"]
  - task: "Scale apps"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
        CASE_PROCESSOR_REPLICAS: ((case-processor-replicas))
        ACTION_WORKER_REPLICAS: ((action-worker-replicas))
        UAC_QID_REPLICAS: ((uac-qid-replicas))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Scale apps up
            kubectl scale deployment action-scheduler --replicas=1
            kubectl scale deployment action-worker --replicas=$ACTION_WORKER_REPLICAS
            kubectl scale deployment case-api --replicas=1
            kubectl scale deployment case-processor --replicas=$CASE_PROCESSOR_REPLICAS
            kubectl scale deployment uacqidservice --replicas=$UAC_QID_REPLICAS

            # Wait for rollout to finish
            kubectl rollout status deploy action-scheduler --watch=true --timeout=200s
            kubectl rollout status deploy action-worker --watch=true --timeout=200s
            kubectl rollout status deploy case-api --watch=true --timeout=200s
            kubectl rollout status deploy case-processor --watch=true --timeout=200s
            kubectl rollout status deploy uacqidservice --watch=true --timeout=200s

  on_failure: *slack_performance_setup_failure

- name: "Performance Tests"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    performance-tests,
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: ["Scale Up Apps"]
  - task: "Run Performance Tests (in K8s)"
    file: performance-tests-repo/tasks/kubectl-run-performance-tests.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      PERFORMANCE_TESTS_IMAGE: ((performance-tests-image))
    input_mapping: {performance-tests-repo: performance-tests-repo}
  on_failure: *slack_performance_tests_failure
  on_success: *slack_performance_tests_finished

- name: "Trigger Terraform"
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    performance-tests,
    action-scheduler,
    action-worker,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsubsvc,
    print-file-service,
    exception-manager,
    toolbox,
    event-latency-monitor,
    rabbitmonitor]
  plan:
    - get: every-minute

# Run Terraform
- name: "Run Terraform"
  disable_manual_trigger: true
  serial: true
  serial_groups: [scale-down,
                  scale-apps,
                  performance-tests,
                  action-scheduler,
                  action-worker,
                  case-api,
                  case-processor,
                  fieldwork-adapter,
                  notify-processor,
                  uac-qid-service,
                  pubsubsvc,
                  print-file-service,
                  exception-manager,
                  toolbox,
                  event-latency-monitor,
                  rabbitmonitor]
  plan:
    - get: every-minute
      trigger: true
      passed: ["Trigger Terraform"]
    - get: census-rm-terraform
    - get: census-rm-deploy
    - task: "Run Terraform"
      file: census-rm-deploy/tasks/terraform-env.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: performance
        VAR_FILE: ./tfvars/census-rm-performance.tfvars
        KUBERNETES_CLUSTER: rm-k8s-cluster
      input_mapping: {census-rm-terraform: census-rm-terraform}

# Run Rabbit Helm
- name: "Run Rabbit Helm"
  disable_manual_trigger: true
  serial: true
  serial_groups: [scale-down,
                  scale-apps,
                  performance-tests,
                  action-scheduler,
                  action-worker,
                  case-api,
                  case-processor,
                  fieldwork-adapter,
                  notify-processor,
                  uac-qid-service,
                  pubsubsvc,
                  print-file-service,
                  exception-manager,
                  toolbox,
                  event-latency-monitor,
                  rabbitmonitor]
  plan:
    - get: every-minute
      trigger: true
      passed: ["Run Terraform"]
    - get: census-rm-kubernetes-dependencies-repo
    - get: census-rm-deploy
    - task: "Run Rabbit Helm"
      file: census-rm-deploy/tasks/helm-rabbit.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: performance
        KUBERNETES_CLUSTER: rm-k8s-cluster
      input_mapping: {census-rm-kubernetes-dependencies-repo: census-rm-kubernetes-dependencies-repo}

- name: "Report Terraform Success"
  disable_manual_trigger: true
  serial: true
  plan:
  - get: every-minute
    trigger: true
    passed: [
      "Run Terraform",
      "Run Rabbit Helm"]
  - *slack_terraform_success