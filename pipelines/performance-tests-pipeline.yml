resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-resource

resources:

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: every-weekday-midnight
  type: cron-resource
  source:
    expression: "0 0 * * 1-5"
    fire_immediately: true

- name: every-weekend
  type: cron-resource
  source:
    expression: "0 0 * * 0"
    fire_immediately: true

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: every-minute
  type: time
  source:
    interval: 1m

- name: performance-tests-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-performance-tests.git
    paths: [kubernetes.env, tasks/*]
    private_key: ((github.service_account_private_key))

- name: performance-tests-docker-image
  type: docker-image
  source:
    repository: ((performance-tests-image))
    username: _json_key
    password: ((gcp.service_account_json))

- name: census-rm-terraform-release
  type: github-release
  source:
    owner: ONSdigital
    repository: census-rm-terraform
    access_token: ((github.access_token))

- name: census-rm-kubernetes-release
  type: github-release
  source:
    owner: ONSdigital
    repository: census-rm-kubernetes
    access_token: ((github.access_token))

templating:

slack_error_alert: &slack_error_alert
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "title": "$BUILD_JOB_NAME errored",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
            "title": "Build",
            "value": "#$BUILD_NAME",
            "short": true
          }
        ],
        "color": "#f58a3d"
      }
    ]

slack_performance_setup_error: &slack_performance_setup_error
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "Performance tests setup errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "title": "$BUILD_JOB_NAME errored",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
            "title": "Build",
            "value": "#$BUILD_NAME",
            "short": true
          }
        ],
        "color": "#f58a3d"
      }
    ]

slack_failure_alert: &slack_failure_alert
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "title": "$BUILD_JOB_NAME failed",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
            "title": "Build",
            "value": "#$BUILD_NAME",
            "short": true
          }
        ],
        "color": "#ff0000"
      }
    ]

slack_performance_setup_failure: &slack_performance_setup_failure
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "Performance tests setup failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "title": "$BUILD_JOB_NAME failed",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
            "title": "Build",
            "value": "#$BUILD_NAME",
            "short": true
          }
        ],
        "color": "#ff0000"
      }
    ]

slack_performance_tests_finished: &slack_performance_tests_finished
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "Performance tests finished. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
        "title": "Performance tests finished",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
          }
        ],
        "color": "#36a64f"
      }
    ]

slack_performance_tests_started: &slack_performance_tests_started
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
      {
        "fallback": "Performance tests run started. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
        "title": "Performance Tests Started",
        "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
        "fields": [
          {
            "title": "Pipeline",
            "value": "$BUILD_PIPELINE_NAME",
            "short": true
          },
          {
            "title": "Project",
            "value": "((performance-gcp-project-name))",
            "short": true
          },
          {
            "title": "Build",
            "value": "#$BUILD_NAME",
            "short": true
          }
        ],
        "color": "#ffe100"
      }
    ]


jobs:

- name: "Select Test - 30 million"
  plan:
  - get: every-weekend
    trigger: true
  - task: "Select test scenario"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              echo "\"@thirty-million\"" | gsutil cp - gs://census-rm-performance-sample-files/target-scenario-tag.txt || true

- name: "Select Test - 3.5 million"
  plan:
  - get: every-weekday-midnight
    trigger: true
  - task: "Select test scenario"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              echo "\"@three-and-a-half-million\"" | gsutil cp - gs://census-rm-performance-sample-files/target-scenario-tag.txt || true

- name: "Select Test - 350k"
  plan:
  - task: "Select test scenario"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              echo "\"@three-hundred-and-fifty-thousand\"" | gsutil cp - gs://census-rm-performance-sample-files/target-scenario-tag.txt || true

- name: "Select Test - Receipting"
  plan:
  - task: "Select test scenario"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              echo "\"@case-receipt-test\"" | gsutil cp - gs://census-rm-performance-sample-files/target-scenario-tag.txt || true

- name: "Select Test - PubSub Adapter"
  plan:
  - task: "Select test scenario"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              echo "\"@pubsub\"" | gsutil cp - gs://census-rm-performance-sample-files/target-scenario-tag.txt || true

- name: "Trigger Selected Test"
  serial: true
  serial_groups: [
    action-scheduler,
    action-worker,
    action-processor,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsub-adapter,
    print-file-service,
    exception-manager,
    toolbox,
    database-monitor,
    rabbitmonitor,
    ops-ui]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
  - get: every-weekday-midnight
    trigger: true
    passed: ["Select Test - 3.5 million"]
  - get: every-weekend
    trigger: true
    passed: ["Select Test - 30 million"]

# Run Terraform
- name: "Run Terraform"
  disable_manual_trigger: true
  serial: true
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  serial_groups: [scale-down,
                  scale-apps,
                  performance-tests,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  fieldwork-adapter,
                  notify-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  ops-ui]
  plan:
    - get: every-minute
      trigger: true
      passed: ["Trigger Selected Test"]
    - get: census-rm-terraform-release
      params: {include_source_tarball: true}
    - get: census-rm-deploy
    - task: unpack-terraform-release
      file: census-rm-deploy/tasks/unpack-release.yml
      input_mapping: {release: census-rm-terraform-release}
      output_mapping: {unpacked-release: census-rm-terraform-release-unpacked}
    - task: "Run Terraform"
      file: census-rm-deploy/tasks/terraform-env.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: performance
        VAR_FILE: ./tfvars/census-rm-performance.tfvars
        KUBERNETES_CLUSTER: rm-k8s-cluster
      input_mapping: {census-rm-terraform: census-rm-terraform-release-unpacked}

- name: "Scale Down Apps and Reset DB"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    action-processor,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsub-adapter,
    print-file-service,
    exception-manager,
    toolbox,
    database-monitor,
    rabbitmonitor,
    ops-ui]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
  - get: census-rm-deploy
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: every-minute
    trigger: true
    passed: ["Run Terraform"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: "Scale down apps"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Scale apps down
            kubectl scale statefulset action-scheduler --replicas=0
            kubectl scale deployment action-worker --replicas=0
            kubectl scale deployment action-processor --replicas=0
            kubectl scale deployment case-api --replicas=0
            kubectl scale deployment case-processor --replicas=0
            kubectl scale deployment uacqidservice --replicas=0
  - task: "Run ground zero"
    file: census-rm-deploy/tasks/kubectl-run-groundzero-script.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}


  on_failure: *slack_performance_setup_failure
  on_error: *slack_error_alert

# Deploy monitoring apps
- name: "Monitoring"
  serial: true
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  serial_groups: [scale-down,
                  scale-apps,
                  performance-tests,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  fieldwork-adapter,
                  notify-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  ops-ui]
  plan:
    - get: every-minute
      trigger: true
      passed: ["Scale Down Apps and Reset DB"]
    - get: census-rm-kubernetes-release
      params: {include_source_tarball: true}
    - get: census-rm-deploy
    - task: unpack-kubernetes-release
      file: census-rm-deploy/tasks/unpack-release.yml
      input_mapping: {release: census-rm-kubernetes-release}
      output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
    - task: "Monitoring"
      file: census-rm-deploy/tasks/monitoring.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: performance
        KUBERNETES_CLUSTER: rm-k8s-cluster
        PROMETHEUS_CONFIG_VALUES_FILE: release/monitoring/prometheus-values.yml
        GRAFANA_CONFIG_VALUES_FILE: release/monitoring/grafana-deployment.yml
      input_mapping: {census-rm-kubernetes-monitoring-repo: census-rm-kubernetes-release-unpacked}

  # Run Rabbitmq
- name: "Run Rabbitmq"
  disable_manual_trigger: true
  serial: true
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  serial_groups: [scale-down,
                  scale-apps,
                  performance-tests,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  fieldwork-adapter,
                  notify-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  ops-ui]
  plan:
    - get: every-minute
      trigger: true
      passed: ["Monitoring"]
    - get: census-rm-kubernetes-release
      params: {include_source_tarball: true}
    - get: census-rm-deploy
    - task: unpack-kubernetes-release
      file: census-rm-deploy/tasks/unpack-release.yml
      input_mapping: {release: census-rm-kubernetes-release}
      output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
    - task: "Run Rabbitmq"
      file: ((rabbitmq-file))
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: performance
        KUBERNETES_CLUSTER: rm-k8s-cluster
        RABBITMQ_CONFIG_VALUES_FILE: ((rabbit-config))
        RABBITMQ_PRODUCTION_SETUP: ((rabbitmq-production-setup))
      input_mapping: {census-rm-kubernetes-dependencies-repo: census-rm-kubernetes-release-unpacked}

- name: "Action Scheduler"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-scheduler]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-statefulset-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Action Worker"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-worker]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-worker
      KUBERNETES_SELECTOR: app=action-worker
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-worker
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Action Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-processor]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-processor
      KUBERNETES_SELECTOR: app=action-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Case API"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-api]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Case Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-processor]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "UAC QID Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [uac-qid-service]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "PubSub Adapter"
  disable_manual_trigger: true
  serial: true
  serial_groups: [pubsub-adapter]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsub-adapter
      KUBERNETES_SELECTOR: app=pubsub-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: pubsub-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Print File Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [print-file-service]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Fieldwork Adapter"
  disable_manual_trigger: true
  serial: true
  serial_groups: [fieldwork-adapter]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Notify Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [notify-processor]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Exception Manager"
  disable_manual_trigger: true
  serial: true
  serial_groups: [exception-manager]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-statefulset-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-statefulset-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Toolbox"
  disable_manual_trigger: true
  serial: true
  serial_groups: [toolbox]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-statefulset
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Database Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [database-monitor]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: database-monitor
      KUBERNETES_SELECTOR: app=database-monitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: database-monitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Rabbit Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [rabbitmonitor]
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Ops UI"
  disable_manual_trigger: true
  serial: true
  serial_groups: [ops-ui]
  on_error: *slack_error_alert
  on_failure: *slack_failure_alert
  plan:
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
    trigger: true
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Run Rabbitmq"]
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops-ui
      KUBERNETES_SELECTOR: app=ops-ui
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: ops-ui
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release-unpacked}

- name: "Scale Up Apps"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    action-processor,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsub-adapter,
    print-file-service,
    exception-manager,
    toolbox,
    database-monitor,
    rabbitmonitor,
    ops-ui]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: [
      "Action Scheduler",
      "Action Worker",
      "Action Processor",
      "Case API",
      "Case Processor",
      "UAC QID Service",
      "PubSub Adapter",
      "Print File Service",
      "Fieldwork Adapter",
      "Notify Processor",
      "Exception Manager",
      "Toolbox",
      "Database Monitor",
      "Rabbit Monitor",
      "Ops UI"]
  - task: "Scale apps"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
        CASE_PROCESSOR_REPLICAS: ((case-processor-replicas))
        ACTION_WORKER_REPLICAS: ((action-worker-replicas))
        ACTION_PROCESSOR_REPLICAS: ((action-processor-replicas))
        UAC_QID_REPLICAS: ((uac-qid-replicas))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Scale apps up
            kubectl scale statefulset action-scheduler --replicas=1
            kubectl scale deployment action-worker --replicas=$ACTION_WORKER_REPLICAS
            kubectl scale deployment action-processor --replicas=$ACTION_PROCESSOR_REPLICAS
            kubectl scale deployment case-api --replicas=1
            kubectl scale deployment case-processor --replicas=$CASE_PROCESSOR_REPLICAS
            kubectl scale deployment uacqidservice --replicas=$UAC_QID_REPLICAS

            # Wait for rollout to finish
            kubectl rollout status sts action-scheduler --watch=true --timeout=200s
            kubectl rollout status deploy action-worker --watch=true --timeout=400s
            kubectl rollout status deploy action-processor --watch=true --timeout=200s
            kubectl rollout status deploy case-api --watch=true --timeout=200s
            kubectl rollout status deploy case-processor --watch=true --timeout=200s
            kubectl rollout status deploy uacqidservice --watch=true --timeout=200s

  on_failure: *slack_performance_setup_failure
  on_error: *slack_performance_setup_error

- name: "Performance Tests"
  disable_manual_trigger: true
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    performance-tests,
    action-scheduler,
    action-worker,
    action-processor,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsub-adapter,
    print-file-service,
    exception-manager,
    toolbox,
    database-monitor,
    rabbitmonitor,
    ops-ui]
  plan:
  - get: performance-tests-repo
  - get: performance-tests-docker-image
    params:
      skip_download: true
  - get: every-minute
    trigger: true
    passed: ["Scale Up Apps"]
  - task: "Run Performance Tests (in K8s)"
    file: performance-tests-repo/tasks/kubectl-run-performance-tests.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((performance-gcp-project-name))
      KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
      PERFORMANCE_TESTS_IMAGE: ((performance-tests-image))
      CASE_PROCESSOR_REPLICAS: ((case-processor-replicas))
    input_mapping: {performance-tests-repo: performance-tests-repo}
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert

- name: "Tear Down"
  serial: true
  serial_groups: [
    scale-down,
    scale-apps,
    action-scheduler,
    action-worker,
    action-processor,
    case-api,
    case-processor,
    fieldwork-adapter,
    notify-processor,
    uac-qid-service,
    pubsub-adapter,
    print-file-service,
    exception-manager,
    toolbox,
    database-monitor,
    rabbitmonitor,
    ops-ui]
  plan:
  - get: every-minute
    trigger: true
    passed: ["Performance Tests"]
  - get: census-rm-kubernetes-release
    params: {include_source_tarball: true}
  - get: census-rm-deploy
  - task: unpack-kubernetes-release
    file: census-rm-deploy/tasks/unpack-release.yml
    input_mapping: {release: census-rm-kubernetes-release}
    output_mapping: {unpacked-release: census-rm-kubernetes-release-unpacked}
  - task: "Remove Print Files"
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: google/cloud-sdk
        params:
          SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
          KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
          GCP_PROJECT_NAME: ((performance-gcp-project-name))
        run:
          path: bash
          args:
            - -exc
            - |
              cat >~/gcloud-service-key.json <<EOL
              $SERVICE_ACCOUNT_JSON
              EOL

              # Use gcloud service account to configure kubectl
              gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
              gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

              # Remove items from bucket
              gsutil -m rm gs://census-rm-performance-sent-print-files/** || true

  - task: "Tear Down Rabbit"
    input_mapping: {census-rm-kubernetes-repo: census-rm-kubernetes-release-unpacked}
    config:
      inputs:
      - name: census-rm-kubernetes-repo
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}
            
            cd census-rm-kubernetes-repo
            ./teardown-rabbitmq.sh


  - task: "Remove node-pools"
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/census-gcr/gcloud-kubectl
      params:
        SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        KUBERNETES_CLUSTER: ((performance-kubernetes-cluster-name))
        GCP_PROJECT_NAME: ((performance-gcp-project-name))
      run:
        path: bash
        args:
          - -exc
          - |
            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Legacy workaround for 403 access denied when doing node pool work
            gcloud services enable container.googleapis.com --project ${GCP_PROJECT_NAME}
            gcloud config set container/use_client_certificate True --project ${GCP_PROJECT_NAME}


            # Delete cluster node pools except for the monitoring one -
            # We still need access to graphs and stats after the tests have finished running
            NODE_POOL_LIST=`gcloud container node-pools list --cluster=${KUBERNETES_CLUSTER} --region=europe-west2 --format="value(name)" --project ${GCP_PROJECT_NAME}`
            for NODE_POOL in $NODE_POOL_LIST ; do
              if [ "$NODE_POOL" != "monitoring-node-pool" ]; then
                echo deleting $NODE_POOL
                gcloud container node-pools delete $NODE_POOL --cluster=${KUBERNETES_CLUSTER} --region=europe-west2 --quiet --project ${GCP_PROJECT_NAME}
              fi
            done
  on_failure: *slack_failure_alert
  on_error: *slack_error_alert
  on_success: *slack_performance_tests_finished
