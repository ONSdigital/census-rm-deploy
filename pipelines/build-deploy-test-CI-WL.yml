---
groups:
- name: "Overview"
  jobs:
  - "CI Reset DB"
  - "Build Acceptance Tests Latest"
  - "Build Action Scheduler Latest"
  - "Build Action Worker Latest"
  - "Build QID Batch Runner Latest"
  - "Build Case API Latest"
  - "Build Case Processor Latest"
  - "Build Data Exporter Latest"
  - "Build DDL Latest"
  - "Build Exception Manager Latest"
  - "Build Fieldwork Adapter Latest"
  - "Build Load Generator Latest"
  - "Build Notify Processor Latest"
  - "Build Notify Stub Latest"
  - "Build Ops Latest"
  - "Build Performance Tests Latest"
  - "Build Print File Service Latest"
  - "Build PubSub Latest"
  - "Build PubSub Adapter Latest"
  - "Build Sample Loader Latest"
  - "Build Toolbox Latest"
  - "Build UAC QID Service Latest"
  - "CI Terraform"
  - "CI Monitoring"
  - "CI Helm"
  - "CI Apply Database Patches"
  - "CI Deploy Action-Scheduler"
  - "CI Deploy Action-Worker"
  - "CI Deploy Case-API"
  - "CI Deploy Case-Processor"
  - "CI Deploy UAC QID Service"
  - "CI Deploy PubSub Adapter"
  - "CI Deploy Ops Tool"
  - "CI Deploy Print File Service"
  - "CI Deploy Fieldwork Adapter"
  - "CI Deploy Notify Processor"
  - "CI Deploy Notify Stub"
  - "CI Deploy Exception Manager"
  - "CI Deploy Toolbox"
  - "CI Deploy Database Monitor"
  - "CI Deploy Rabbit Monitor"
  - "CI Deploy Regional Counts"
  - "CI Acceptance Tests"
  - "CI Nightly Regression ATs"
  - "WL Terraform"
  - "WL Monitoring"
  - "WL Helm"
  - "WL Apply Database Patches"
  - "WL Deploy Action-Scheduler"
  - "WL Deploy Action-Worker"
  - "WL Deploy Case-API"
  - "WL Deploy Case-Processor"
  - "WL Deploy UAC QID Service"
  - "WL Deploy PubSub Adapter"
  - "WL Deploy Ops Tool"
  - "WL Deploy Print File Service"
  - "WL Deploy Fieldwork Adapter"
  - "WL Deploy Notify Processor"
  - "WL Deploy Exception Manager"
  - "WL Deploy Toolbox"
  - "WL Deploy Database Monitor"
  - "WL Deploy Rabbit Monitor"
  - "WL Deploy Regional Counts"
  - "WL Whitelist"
  - "WL Whitelist Nightly"

- name: "Docker Builds"
  jobs:
  - "Build Acceptance Tests Latest"
  - "Build Action Scheduler Latest"
  - "Build Action Worker Latest"
  - "Build QID Batch Runner Latest"
  - "Build Case API Latest"
  - "Build Case Processor Latest"
  - "Build Data Exporter Latest"
  - "Build DDL Latest"
  - "Build Exception Manager Latest"
  - "Build Fieldwork Adapter Latest"
  - "Build Load Generator Latest"
  - "Build Notify Processor Latest"
  - "Build Notify Stub Latest"
  - "Build Ops Latest"
  - "Build Performance Tests Latest"
  - "Build Print File Service Latest"
  - "Build PubSub Adapter Latest"
  - "Build PubSub Latest"
  - "Build Sample Loader Latest"
  - "Build Toolbox Latest"
  - "Build UAC QID Service Latest"

- name: "CI"
  jobs:
  - "CI Terraform"
  - "CI Reset DB"
  - "CI Monitoring"
  - "CI Helm"
  - "CI Apply Database Patches"
  - "CI Deploy Action-Scheduler"
  - "CI Deploy Action-Worker"
  - "CI Deploy Case-API"
  - "CI Deploy Case-Processor"
  - "CI Deploy UAC QID Service"
  - "CI Deploy PubSub Adapter"
  - "CI Deploy Ops Tool"
  - "CI Deploy Print File Service"
  - "CI Deploy Fieldwork Adapter"
  - "CI Deploy Notify Processor"
  - "CI Deploy Notify Stub"
  - "CI Deploy Exception Manager"
  - "CI Deploy Toolbox"
  - "CI Deploy Database Monitor"
  - "CI Deploy Rabbit Monitor"
  - "CI Deploy Regional Counts"
  - "CI Acceptance Tests"
  - "CI Nightly Regression ATs"

- name: "Whitelodge"
  jobs:
  - "WL Terraform"
  - "WL Monitoring"
  - "WL Helm"
  - "WL Apply Database Patches"
  - "WL Deploy Action-Scheduler"
  - "WL Deploy Action-Worker"
  - "WL Deploy Case-API"
  - "WL Deploy Case-Processor"
  - "WL Deploy UAC QID Service"
  - "WL Deploy PubSub Adapter"
  - "WL Deploy Ops Tool"
  - "WL Deploy Print File Service"
  - "WL Deploy Fieldwork Adapter"
  - "WL Deploy Notify Processor"
  - "WL Deploy Exception Manager"
  - "WL Deploy Toolbox"
  - "WL Deploy Database Monitor"
  - "WL Deploy Rabbit Monitor"
  - "WL Deploy Regional Counts"
  - "WL Whitelist"
  - "WL Whitelist Nightly"

resource_types:

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-resource

resources:

- name: every-midnight
  type: cron-resource
  source:
    expression: "0 0 * * *"
    fire_immediately: true

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [microservices/*]

- name: census-rm-kubernetes-ops-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [optional/ops-*]

- name: census-rm-kubernetes-optional-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [optional/*]

- name: census-rm-kubernetes-dependencies-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [dependencies/*, rabbitmq/*, setup-dependencies.sh]

- name: census-rm-kubernetes-monitoring-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [monitoring/*, grafana-dashboards/*, setup-monitoring.sh]

- name: census-rm-terraform
  type: git
  source:
    branch: ((terraform-branch))
    uri: git@github.com:ONSdigital/census-rm-terraform.git
    private_key: ((github.service_account_private_key))

- name: census-rm-ddl-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-ddl.git
    private_key: ((github.service_account_private_key))

- name: action-scheduler-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-action-scheduler.git
    private_key: ((github.service_account_private_key))

- name: action-worker-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-action-worker.git
    private_key: ((github.service_account_private_key))

- name: case-api-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-case-api.git
    private_key: ((github.service_account_private_key))

- name: case-processor-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-case-processor.git
    private_key: ((github.service_account_private_key))

- name: print-file-service-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-print-file-service
    private_key: ((github.service_account_private_key))

- name: uac-qid-service-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-uac-qid-service.git
    private_key: ((github.service_account_private_key))

- name: ops-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-ops.git
    private_key: ((github.service_account_private_key))

- name: toolbox-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-toolbox.git
    private_key: ((github.service_account_private_key))

- name: pubsub-adapter
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-pubsub-adapter.git
    private_key: ((github.service_account_private_key))

- name: pubsub-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-pubsub.git
    private_key: ((github.service_account_private_key))

- name: qid-batch-runner-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-qid-batch-runner.git
    private_key: ((github.service_account_private_key))

- name: sample-loader-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-sample-loader.git
    private_key: ((github.service_account_private_key))

- name: acceptance-tests-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-acceptance-tests.git
    private_key: ((github.service_account_private_key))

- name: fieldwork-adapter-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-fieldwork-adapter.git
    private_key: ((github.service_account_private_key))

- name: notify-processor-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-notify-processor.git
    private_key: ((github.service_account_private_key))

- name: notify-stub-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-notify-stub.git
    private_key: ((github.service_account_private_key))

- name: data-exporter-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-dataexporter.git
    private_key: ((github.service_account_private_key))

- name: exception-manager-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-exception-manager.git
    private_key: ((github.service_account_private_key))

- name: performance-tests-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-performance-tests.git
    private_key: ((github.service_account_private_key))

- name: load-generator-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-load-generator.git
    private_key: ((github.service_account_private_key))

- name: whitelist-master
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-whitelist.git
    private_key: ((github.service_account_private_key))

# Docker images
- name: action-scheduler-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-action-scheduler
    username: _json_key
    password: ((gcp.service_account_json))

- name: action-scheduler-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-action-scheduler
    username: _json_key
    password: ((gcp.service_account_json))

- name: action-worker-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-action-worker
    username: _json_key
    password: ((gcp.service_account_json))

- name: action-worker-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-action-worker
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-api-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-case-api
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-api-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-case-api
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-processor-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-case-processor
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-processor-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-case-processor
    username: _json_key
    password: ((gcp.service_account_json))

- name: print-file-service-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-print-file-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: print-file-service-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-print-file-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: uac-qid-service-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-uac-qid-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: uac-qid-service-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-uac-qid-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: ops-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-ops
    username: _json_key
    password: ((gcp.service_account_json))

- name: ops-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-ops
    username: _json_key
    password: ((gcp.service_account_json))

- name: toolbox-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-toolbox
    username: _json_key
    password: ((gcp.service_account_json))

- name: toolbox-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-toolbox
    username: _json_key
    password: ((gcp.service_account_json))

- name: pubsub-adapter-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-pubsub-adapter
    username: _json_key
    password: ((gcp.service_account_json))

- name: pubsub-adapter-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-pubsub-adapter
    username: _json_key
    password: ((gcp.service_account_json))

- name: ddl-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-ddl
    username: _json_key
    password: ((gcp.service_account_json))

- name: ddl-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-ddl
    username: _json_key
    password: ((gcp.service_account_json))

- name: pubsub-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-pubsub
    username: _json_key
    password: ((gcp.service_account_json))

- name: pubsub-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-pubsub
    username: _json_key
    password: ((gcp.service_account_json))

- name: qid-batch-runner-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-qid-batch-runner
    username: _json_key
    password: ((gcp.service_account_json))

- name: qid-batch-runner-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-qid-batch-runner
    username: _json_key
    password: ((gcp.service_account_json))

- name: sample-loader-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-sample-loader
    username: _json_key
    password: ((gcp.service_account_json))

- name: sample-loader-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-sample-loader
    username: _json_key
    password: ((gcp.service_account_json))

- name: acceptance-tests-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-acceptance-tests
    username: _json_key
    password: ((gcp.service_account_json))

- name: acceptance-tests-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-acceptance-tests
    username: _json_key
    password: ((gcp.service_account_json))

- name: fieldwork-adapter-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-fieldwork-adapter
    username: _json_key
    password: ((gcp.service_account_json))

- name: fieldwork-adapter-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-fieldwork-adapter
    username: _json_key
    password: ((gcp.service_account_json))

- name: notify-processor-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-notify-processor
    username: _json_key
    password: ((gcp.service_account_json))

- name: notify-processor-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-notify-processor
    username: _json_key
    password: ((gcp.service_account_json))

- name: notify-stub-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-notify-stub
    username: _json_key
    password: ((gcp.service_account_json))

- name: notify-stub-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-notify-stub
    username: _json_key
    password: ((gcp.service_account_json))

- name: data-exporter-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-data-exporter
    username: _json_key
    password: ((gcp.service_account_json))

- name: data-exporter-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-data-exporter
    username: _json_key
    password: ((gcp.service_account_json))

- name: exception-manager-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-exception-manager
    username: _json_key
    password: ((gcp.service_account_json))

- name: exception-manager-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-exception-manager
    username: _json_key
    password: ((gcp.service_account_json))

- name: performance-tests-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-performance-tests
    username: _json_key
    password: ((gcp.service_account_json))

- name: performance-tests-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-performance-tests
    username: _json_key
    password: ((gcp.service_account_json))

- name: load-generator-docker-image-ci
  type: docker-image
  source:
    repository: ((docker-registry-ci))/rm/census-rm-load-generator
    username: _json_key
    password: ((gcp.service_account_json))

- name: load-generator-docker-image-gcr
  type: docker-image
  source:
    repository: ((docker-registry-gcr))/rm/census-rm-load-generator
    username: _json_key
    password: ((gcp.service_account_json))

templating:

  slack_failure_alert_ci: &slack_failure_alert_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME failed",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Environment",
              "value": "((ci-gcp-environment-name))",
              "short": true
            },
            {
              "title": "Project",
              "value": "((ci-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#ff0000"
        }
      ]

  slack_error_alert_ci: &slack_error_alert_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME errored",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Environment",
              "value": "((ci-gcp-environment-name))",
              "short": true
            },
            {
              "title": "Project",
              "value": "((ci-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#f58a3d"
        }
      ]

  slack_success_alert_ci: &slack_success_alert_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME succeeded",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Environment",
              "value": "((ci-gcp-environment-name))",
              "short": true
            },
            {
              "title": "Project",
              "value": "((ci-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#36a64f"
        }
      ]

  slack_started_alert_ci: &slack_started_alert_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME started... See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME started...",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Environment",
              "value": "((ci-gcp-environment-name))",
              "short": true
            },
            {
              "title": "Project",
              "value": "((ci-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#36a64f"
        }
      ]

  slack_failure_alert_prebuild: &slack_failure_alert_prebuild
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME failed",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
        ],
          "color": "#ff0000"
        }
      ]

  slack_error_alert_prebuild: &slack_error_alert_prebuild
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME errored",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
        ],
          "color": "#f58a3d"
        }
      ]

  slack_docker_build_failure_ci: &slack_docker_build_failure_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME failed",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Registry",
              "value": "((docker-registry-ci))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#ff0000"
        }
      ]

  slack_docker_build_ereror_ci: &slack_docker_build_error_ci
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME errored",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Registry",
              "value": "((docker-registry-ci))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#f58a3d"
        }
      ]

  slack_docker_build_failure_gcr: &slack_docker_build_failure_gcr
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME failed",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Registry",
              "value": "((docker-registry-gcr))",
              "short": true
            },

            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#ff0000"
        }
      ]

  slack_docker_build_error_gcr: &slack_docker_build_error_gcr
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME errored",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Registry",
              "value": "((docker-registry-gcr))",
              "short": true
            },

            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#f58a3d"
        }
      ]

  slack_failure_alert_wl: &slack_failure_alert_wl
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME failed",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Project",
              "value": "((wl-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#ff0000"
        }
      ]

  slack_error_alert_wl: &slack_error_alert_wl
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME errored. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME errored",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Project",
              "value": "((wl-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#f58a3d"
        }
      ]

  slack_success_alert_wl: &slack_success_alert_wl
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME succeeded",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
            },
            {
              "title": "Project",
              "value": "((wl-gcp-project-name))",
              "short": true
            },
            {
                "title": "Build",
                "value": "#$BUILD_NAME",
                "short": true
            }
          ],
          "color": "#36a64f"
       }
      ]

  slack_started_alert_wl: &slack_started_alert_wl
    put: slack-alert
    params:
      icon_emoji: ":concourse:"
      username: Concourse
      attachments: [
        {
          "fallback": "$BUILD_JOB_NAME started... See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "title": "$BUILD_JOB_NAME started...",
          "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
          "fields": [
            {
              "title": "Pipeline",
              "value": "$BUILD_PIPELINE_NAME",
              "short": true
          },
            {
              "title": "Project",
              "value": "((wl-gcp-project-name))",
              "short": true
            },
            {
              "title": "Build",
              "value": "#$BUILD_NAME",
              "short": true
            }
          ],
          "color": "#36a64f"
        }
      ]


jobs:

# Docker Builds
- name: "Build Action Scheduler Latest"
  serial_groups: [action-scheduler-build]
  plan:
  - get: action-scheduler-master
    trigger: true
  - task: Build Action Scheduler Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: action-scheduler-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd action-scheduler-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/census-rm-*.jar ../build/target
            cp Dockerfile ../build
            cp healthcheck.sh ../build
  - put: action-scheduler-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: action-scheduler-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: action-scheduler-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_failure_gcr
    params:
      build: build
      cache_from:
        - action-scheduler-docker-image-ci
      tag_file: action-scheduler-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Action Worker Latest"
  serial_groups: [action-worker-build]
  plan:
  - get: action-worker-master
    trigger: true
  - task: Build Action Worker Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: action-worker-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd action-worker-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/census-rm-*.jar ../build/target
            cp Dockerfile ../build
            cp healthcheck.sh ../build
  - put: action-worker-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: action-worker-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: action-worker-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - action-worker-docker-image-ci
      tag_file: action-worker-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Case API Latest"
  serial_groups: [case-api-build]
  plan:
  - get: case-api-master
    trigger: true
  - task: Build Case API Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: case-api-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd case-api-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/census-rm-*.jar ../build/target
            cp Dockerfile ../build
  - put: case-api-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: case-api-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: case-api-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - case-api-docker-image-ci
      tag_file: case-api-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Case Processor Latest"
  serial_groups: [case-processor-build]
  plan:
  - get: case-processor-master
    trigger: true
  - task: Build Case Processor Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: case-processor-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd case-processor-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/census-rm-*.jar ../build/target
            cp Dockerfile ../build
            cp healthcheck.sh ../build
  - put: case-processor-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: case-processor-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: case-processor-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - case-processor-docker-image-ci
      tag_file: case-processor-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Print File Service Latest"
  serial_groups: [print-file-service-build]
  plan:
  - get: print-file-service-master
    trigger: true
  - put: print-file-service-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: print-file-service-master
      tag_file: print-file-service-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: print-file-service-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: print-file-service-master
      cache_from:
        - print-file-service-docker-image-ci
      tag_file: print-file-service-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build DDL Latest"
  serial_groups: [ddl-build]
  plan:
  - get: census-rm-ddl-master
    trigger: true
  - put: ddl-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: census-rm-ddl-master
      tag_file: census-rm-ddl-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: ddl-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: census-rm-ddl-master
      cache_from:
        - ddl-docker-image-ci
      tag_file: census-rm-ddl-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build UAC QID Service Latest"
  serial_groups: [uac-qid-service-build]
  plan:
  - get: uac-qid-service-master
    trigger: true
  - task: Build UAC QID Service Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: uac-qid-service-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd uac-qid-service-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/*.jar ../build/target
            cp Dockerfile ../build
  - put: uac-qid-service-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: uac-qid-service-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: uac-qid-service-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - uac-qid-service-docker-image-ci
      tag_file: uac-qid-service-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Ops Latest"
  serial_groups: [ops-build]
  plan:
  - get: ops-master
    trigger: true
  - put: ops-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: ops-master
      tag_file: ops-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: ops-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: ops-master
      cache_from:
        - ops-docker-image-ci
      tag_file: ops-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Toolbox Latest"
  serial_groups: [toolbox-build]
  plan:
  - get: toolbox-master
    trigger: true
  - put: toolbox-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: toolbox-master
      tag_file: toolbox-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: toolbox-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: toolbox-master
      cache_from:
        - toolbox-docker-image-ci
      tag_file: toolbox-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build PubSub Adapter Latest"
  serial_groups: [pubsub-adapter-build]
  plan:
  - get: pubsub-adapter
    trigger: true
  - put: pubsub-adapter-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: pubsub-adapter
      tag_file: pubsub-adapter/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: pubsub-adapter-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: pubsub-adapter
      cache_from:
        - pubsub-adapter-docker-image-ci
      tag_file: pubsub-adapter/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build PubSub Latest"
  serial_groups: [pubsub-build]
  plan:
  - get: pubsub-master
    trigger: true
  - put: pubsub-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: pubsub-master
      tag_file: pubsub-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: pubsub-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: pubsub-master
      cache_from:
        - pubsub-docker-image-ci
      tag_file: pubsub-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build QID Batch Runner Latest"
  serial_groups: [qid-batch-runner-build]
  plan:
  - get: qid-batch-runner-master
    trigger: true
  - put: qid-batch-runner-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: qid-batch-runner-master
      tag_file: qid-batch-runner-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: qid-batch-runner-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: qid-batch-runner-master
      cache_from:
        - qid-batch-runner-docker-image-ci
      tag_file: qid-batch-runner-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Sample Loader Latest"
  serial_groups: [sample-loader-build]
  plan:
  - get: sample-loader-master
    trigger: true
  - put: sample-loader-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: sample-loader-master
      tag_file: sample-loader-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: sample-loader-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: sample-loader-master
      cache_from:
        - sample-loader-docker-image-ci
      tag_file: sample-loader-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Acceptance Tests Latest"
  serial_groups: [acceptance-tests-build]
  plan:
  - get: acceptance-tests-master
    trigger: true
  - put: acceptance-tests-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: acceptance-tests-master
      tag_file: acceptance-tests-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: acceptance-tests-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: acceptance-tests-master
      cache_from:
        - acceptance-tests-docker-image-ci
      tag_file: acceptance-tests-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Fieldwork Adapter Latest"
  serial_groups: [fieldwork-adapter-build]
  plan:
  - get: fieldwork-adapter-master
    trigger: true
  - task: Build Fieldwork Adapter Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: fieldwork-adapter-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd fieldwork-adapter-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/*.jar ../build/target
            cp Dockerfile ../build
            cp healthcheck.sh ../build
  - put: fieldwork-adapter-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: fieldwork-adapter-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: fieldwork-adapter-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - fieldwork-adapter-docker-image-ci
      tag_file: fieldwork-adapter-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Notify Processor Latest"
  serial_groups: [notify-processor-build]
  plan:
  - get: notify-processor-master
    trigger: true
  - task: Build Notify Processor Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: notify-processor-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd notify-processor-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/*.jar ../build/target
            cp Dockerfile ../build
            cp healthcheck.sh ../build
  - put: notify-processor-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: notify-processor-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: notify-processor-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - notify-processor-docker-image-ci
      tag_file: notify-processor-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Notify Stub Latest"
  serial_groups: [notify-stub-build]
  plan:
  - get: notify-stub-master
    trigger: true
  - put: notify-stub-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: notify-stub-master
      tag_file: notify-stub-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: notify-stub-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: notify-stub-master
      cache_from:
        - notify-stub-docker-image-ci
      tag_file: notify-stub-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Data Exporter Latest"
  serial_groups: [data-exporter-build]
  plan:
  - get: data-exporter-master
    trigger: true
  - put: data-exporter-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: data-exporter-master/docker
      tag_file: data-exporter-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: data-exporter-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: data-exporter-master/docker
      cache_from:
        - data-exporter-docker-image-ci
      tag_file: data-exporter-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Exception Manager Latest"
  serial_groups: [exception-manager-build]
  plan:
  - get: exception-manager-master
    trigger: true
  - task: Build Exception Manager Image (master)
    on_failure: *slack_failure_alert_prebuild
    on_error: *slack_error_alert_prebuild
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk/maven-openjdk11
      inputs:
        - name: exception-manager-master
      outputs:
        - name: build
      run:
        path: sh
        args:
          - -exc
          - |
            mkdir -p build/target
            cd exception-manager-master
            mvn package -DskipITs -Ddockerfile.skip
            cp target/census-rm-*.jar ../build/target
            cp Dockerfile ../build
  - put: exception-manager-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: build
      tag_file: exception-manager-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: exception-manager-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: build
      cache_from:
        - exception-manager-docker-image-ci
      tag_file: exception-manager-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Performance Tests Latest"
  serial_groups: [performance-tests-build]
  plan:
  - get: performance-tests-master
    trigger: true
  - put: performance-tests-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: performance-tests-master
      tag_file: performance-tests-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: performance-tests-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: performance-tests-master
      cache_from:
        - performance-tests-docker-image-ci
      tag_file: performance-tests-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

- name: "Build Load Generator Latest"
  serial_groups: [load-generator-build]
  plan:
  - get: load-generator-master
    trigger: true
  - put: load-generator-docker-image-ci
    on_failure: *slack_docker_build_failure_ci
    on_error: *slack_docker_build_error_ci
    params:
      build: load-generator-master
      tag_file: load-generator-master/.git/ref
      tag_as_latest: true
    get_params:
      save: true
  - put: load-generator-docker-image-gcr
    on_failure: *slack_docker_build_failure_gcr
    on_error: *slack_docker_build_error_gcr
    params:
      build: load-generator-master
      cache_from:
        - load-generator-docker-image-ci
      tag_file: load-generator-master/.git/ref
      tag_as_latest: true
    get_params:
      skip_download: true

# Run DB Teardown
- name: "CI Reset DB"
  on_failure: *slack_failure_alert_ci
  on_error: *slack_error_alert_ci
  plan:
  - get: every-midnight
    trigger: true
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - task: "Run ground zero"
    file: census-rm-deploy/tasks/kubectl-run-groundzero-script.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "CI Terraform"
  serial: true
  serial_groups: [ci-terraform,
                  ci-acceptance-tests,
                  action-scheduler-deploy,
                  action-worker-deploy,
                  case-api-deploy,
                  case-processor-deploy,
                  uac-qid-service-deploy,
                  pubsub-adapter-deploy,
                  print-file-service-deploy,
                  fieldwork-adapter-deploy,
                  notify-processor-deploy,
                  notify-stub-deploy,
                  exception-manager-deploy,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy,
                  ops-deploy]
  on_failure: *slack_failure_alert_ci
  on_error: *slack_error_alert_ci
  plan:
  - get: census-rm-terraform
    trigger: true
  - get: census-rm-deploy
  - task: "CI Terraform"
    file: census-rm-deploy/tasks/terraform-env.yml
    params:
      ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      ENV: ci
      VAR_FILE: ./tfvars/census-rm-ci.tfvars
      KUBERNETES_CLUSTER: rm-k8s-cluster
    input_mapping: {census-rm-terraform: census-rm-terraform}

# Deploy monitoring apps
- name: "CI Monitoring"
  serial: true
  serial_groups: [ci-terraform,
                  ci-acceptance-tests,
                  action-scheduler-deploy,
                  action-worker-deploy,
                  case-api-deploy,
                  case-processor-deploy,
                  uac-qid-service-deploy,
                  pubsub-adapter-deploy,
                  print-file-service-deploy,
                  fieldwork-adapter-deploy,
                  notify-processor-deploy,
                  notify-stub-deploy,
                  exception-manager-deploy,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy]
  on_failure: *slack_failure_alert_ci
  on_error: *slack_error_alert_ci
  plan:
    - get: census-rm-kubernetes-monitoring-repo
      trigger: true
    - get: census-rm-deploy
    - get: census-rm-terraform
      passed: ["CI Terraform"]
    - task: "CI Monitoring"
      file: census-rm-deploy/tasks/monitoring.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: ci
        KUBERNETES_CLUSTER: rm-k8s-cluster
        PROMETHEUS_CONFIG_VALUES_FILE: monitoring/prometheus-values.yml
        GRAFANA_CONFIG_VALUES_FILE: monitoring/grafana-deployment.yml
      input_mapping: {census-rm-kubernetes-monitoring-repo: census-rm-kubernetes-monitoring-repo}


- name: "CI Helm"
  serial: true
  serial_groups: [ci-terraform,
                  ci-acceptance-tests,
                  action-scheduler-deploy,
                  action-worker-deploy,
                  case-api-deploy,
                  case-processor-deploy,
                  uac-qid-service-deploy,
                  pubsub-adapter-deploy,
                  print-file-service-deploy,
                  fieldwork-adapter-deploy,
                  notify-processor-deploy,
                  notify-stub-deploy,
                  exception-manager-deploy,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy]
  on_failure: *slack_failure_alert_ci
  on_error: *slack_error_alert_ci
  plan:
    - get: census-rm-kubernetes-dependencies-repo
      trigger: true
    - get: census-rm-deploy
    - get: census-rm-terraform
      passed: ["CI Terraform"]
    - task: "CI Helm"
      file: census-rm-deploy/tasks/helm.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: ci
        KUBERNETES_CLUSTER: rm-k8s-cluster
        RABBITMQ_CONFIG_VALUES_FILE: rabbitmq/values.yml
      input_mapping: {census-rm-kubernetes-dependencies-repo: census-rm-kubernetes-dependencies-repo}


  # Apply Database Patches
- name: "CI Apply Database Patches"
  serial: true
  serial_groups: [ci-database-patches,
                  ci-acceptance-tests,
                  action-scheduler-deploy,
                  action-worker-deploy,
                  case-api-deploy,
                  case-processor-deploy,
                  uac-qid-service-deploy,
                  pubsub-adapter-deploy,
                  print-file-service-deploy,
                  fieldwork-adapter-deploy,
                  notify-processor-deploy,
                  notify-stub-deploy,
                  exception-manager-deploy,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy]
  on_failure: *slack_failure_alert_ci
  on_error: *slack_error_alert_ci
  plan:
  - get: census-rm-ddl-master
    trigger: true
    passed: ["Build DDL Latest"]
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - get: ddl-docker-image-gcr
    params:
      skip_download: true
  - task: apply-database-patches
    file: census-rm-deploy/tasks/kubectl-apply-ddl-patches.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-optional-repo}


# CI Deployments
- name: "CI Deploy Action-Scheduler"
  serial: true
  serial_groups: [action-scheduler-build,
                  action-scheduler-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: action-scheduler-master
    trigger: true
    passed: ["Build Action Scheduler Latest"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: action-scheduler-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-scheduler-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Action-Worker"
  serial: true
  serial_groups: [action-worker-build,
                  action-worker-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: action-worker-master
    trigger: true
    passed: ["Build Action Worker Latest"]
  - get: action-worker-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-worker
      KUBERNETES_SELECTOR: app=action-worker
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-worker
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-worker-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Case-API"
  serial: true
  serial_groups: [case-api-build,
                  case-api-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: case-api-master
    trigger: true
    passed: ["Build Case API Latest"]
  - get: case-api-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-api-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Case-Processor"
  serial: true
  serial_groups: [case-processor-build,
                  case-processor-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: case-processor-master
    trigger: true
    passed: ["Build Case Processor Latest"]
  - get: case-processor-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-processor-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy UAC QID Service"
  serial: true
  serial_groups: [uac-qid-service-build,
                  uac-qid-service-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: uac-qid-service-master
    trigger: true
    passed: ["Build UAC QID Service Latest"]
  - get: uac-qid-service-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: uac-qid-service-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy PubSub Adapter"
  serial: true
  serial_groups: [pubsub-adapter-build,
                  pubsub-adapter-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: pubsub-adapter
    trigger: true
    passed: ["Build PubSub Adapter Latest"]
  - get: pubsub-adapter-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsub-adapter
      KUBERNETES_SELECTOR: app=pubsub-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: pubsub-adapter-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Ops Tool"
  serial: true
  serial_groups: [ops-build,
                  ops-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-ops-repo
    trigger: true
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: ops-master
    trigger: true
    passed: ["Build Ops Latest"]
  - get: ops-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: ops-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: "CI Deploy Print File Service"
  serial: true
  serial_groups: [print-file-service-build,
                  print-file-service-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: print-file-service-master
    trigger: true
    passed: ["Build Print File Service Latest"]
  - get: print-file-service-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: print-file-service-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Fieldwork Adapter"
  serial: true
  serial_groups: [fieldwork-adapter-build,
                  fieldwork-adapter-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: fieldwork-adapter-master
    trigger: true
    passed: ["Build Fieldwork Adapter Latest"]
  - get: fieldwork-adapter-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: fieldwork-adapter-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Notify Processor"
  serial: true
  serial_groups: [notify-processor-build,
                  notify-processor-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: notify-processor-master
    trigger: true
    passed: ["Build Notify Processor Latest"]
  - get: notify-processor-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: notify-processor-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Notify Stub"
  serial: true
  serial_groups: [notify-stub-build,
                  notify-stub-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: notify-stub-master
    trigger: true
    passed: ["Build Notify Stub Latest"]
  - get: notify-stub-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-stub
      KUBERNETES_SELECTOR: app=notify-stub
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: notify-stub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: notify-stub-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Exception Manager"
  serial: true
  serial_groups: [exception-manager-build,
                  exception-manager-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: exception-manager-master
    trigger: true
    passed: ["Build Exception Manager Latest"]
  - get: exception-manager-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: exception-manager-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Toolbox"
  serial: true
  serial_groups: [toolbox-build,
                  toolbox-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
  - get: toolbox-master
    trigger: true
    passed: ["Build Toolbox Latest"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "CI Deploy Database Monitor"
  serial: true
  serial_groups: [toolbox-build,
                  database-monitor-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: toolbox-master
    trigger: true
    passed: ["Build Toolbox Latest"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: database-monitor
      KUBERNETES_SELECTOR: app=database-monitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: database-monitor-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "CI Deploy Rabbit Monitor"
  serial: true
  serial_groups: [toolbox-build,
                  rabbitmonitor-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
  - get: toolbox-master
    trigger: true
    passed: ["Build Toolbox Latest"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "CI Deploy Regional Counts"
  serial: true
  serial_groups: [toolbox-build,
                  regional-counts-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["CI Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
  - get: toolbox-master
    trigger: true
    passed: ["Build Toolbox Latest"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: regionalcounts
      KUBERNETES_SELECTOR: app=regionalcounts
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: regional-counts-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}



- name: "CI Acceptance Tests"
  serial: true
  serial_groups: [ci-deploy-infrastructure,
                  ci-acceptance-tests,
                  action-scheduler-build,
                  action-scheduler-deploy,
                  action-worker-build,
                  action-worker-deploy,
                  case-api-build,
                  case-api-deploy,
                  case-processor-build,
                  case-processor-deploy,
                  uac-qid-service-build,
                  uac-qid-service-deploy,
                  pubsub-adapter-build,
                  pubsub-adapter-deploy,
                  print-file-service-build,
                  print-file-service-deploy,
                  fieldwork-adapter-build,
                  fieldwork-adapter-deploy,
                  notify-processor-build,
                  notify-processor-deploy,
                  notify-stub-build,
                  notify-stub-deploy,
                  exception-manager-build,
                  exception-manager-deploy,
                  toolbox-build,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Action-Scheduler",
             "CI Deploy Action-Worker",
             "CI Deploy Case-API",
             "CI Deploy Case-Processor",
             "CI Deploy UAC QID Service",
             "CI Deploy PubSub Adapter",
             "CI Deploy Print File Service",
             "CI Deploy Fieldwork Adapter",
             "CI Deploy Notify Processor",
             "CI Deploy Notify Stub",
             "CI Deploy Exception Manager",
             "CI Deploy Toolbox",
             "CI Deploy Database Monitor",
             "CI Deploy Rabbit Monitor",
             "CI Deploy Regional Counts"]
  - get: acceptance-tests-master
    trigger: true
    passed: ["Build Acceptance Tests Latest"]
  - get: acceptance-tests-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Deploy Action-Scheduler",
             "CI Deploy Action-Worker",
             "CI Deploy Case-API",
             "CI Deploy Case-Processor",
             "CI Deploy UAC QID Service",
             "CI Deploy PubSub Adapter",
             "CI Deploy Print File Service",
             "CI Deploy Fieldwork Adapter",
             "CI Deploy Notify Processor",
             "CI Deploy Notify Stub",
             "CI Deploy Exception Manager"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Deploy Action-Scheduler",
             "CI Deploy Action-Worker",
             "CI Deploy Case-API",
             "CI Deploy Case-Processor",
             "CI Deploy UAC QID Service",
             "CI Deploy PubSub Adapter",
             "CI Deploy Print File Service",
             "CI Deploy Fieldwork Adapter",
             "CI Deploy Notify Processor",
             "CI Deploy Notify Stub",
             "CI Deploy Exception Manager"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
    passed: ["CI Deploy Toolbox",
             "CI Deploy Database Monitor",
             "CI Deploy Rabbit Monitor",
             "CI Deploy Regional Counts"]
  - get: action-scheduler-master
    trigger: true
    passed: ["CI Deploy Action-Scheduler"]
  - get: action-worker-master
    trigger: true
    passed: ["CI Deploy Action-Worker"]
  - get: case-api-master
    trigger: true
    passed: ["CI Deploy Case-API"]
  - get: case-processor-master
    trigger: true
    passed: ["CI Deploy Case-Processor"]
  - get: uac-qid-service-master
    trigger: true
    passed: ["CI Deploy UAC QID Service"]
  - get: pubsub-adapter
    trigger: true
    passed: ["CI Deploy PubSub Adapter"]
  - get: qid-batch-runner-master
    trigger: true
  - get: print-file-service-master
    trigger: true
    passed: ["CI Deploy Print File Service"]
  - get: fieldwork-adapter-master
    trigger: true
    passed: ["CI Deploy Fieldwork Adapter"]
  - get: notify-processor-master
    trigger: true
    passed: ["CI Deploy Notify Processor"]
  - get: notify-stub-master
    trigger: true
    passed: ["CI Deploy Notify Stub"]
  - get: exception-manager-master
    trigger: true
    passed: ["CI Deploy Exception Manager"]
  - get: toolbox-master
    trigger: true
    passed: ["CI Deploy Toolbox",
             "CI Deploy Database Monitor",
             "CI Deploy Rabbit Monitor",
             "CI Deploy Regional Counts"]
  - task: "Run Acceptance Tests (in K8s)"
    file: acceptance-tests-master/tasks/kubectl-run-acceptance-tests.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      ACCEPTANCE_TESTS_IMAGE: ((acceptance-tests-image))
      BATCH_RUNNER_CONFIG: batch-runner-repo/qid-batch-runner.yml
    input_mapping: {acceptance-tests-repo: acceptance-tests-master,
                    batch-runner-repo: qid-batch-runner-master}

- name: "CI Nightly Regression ATs"
  serial: true
  serial_groups: [ci-deploy-infrastructure,
                  ci-acceptance-tests,
                  action-scheduler-build,
                  action-scheduler-deploy,
                  action-worker-build,
                  action-worker-deploy,
                  case-api-build,
                  case-api-deploy,
                  case-processor-build,
                  case-processor-deploy,
                  uac-qid-service-build,
                  uac-qid-service-deploy,
                  pubsub-adapter-build,
                  pubsub-adapter-deploy,
                  print-file-service-build,
                  print-file-service-deploy,
                  fieldwork-adapter-build,
                  fieldwork-adapter-deploy,
                  notify-processor-build,
                  notify-processor-deploy,
                  notify-stub-build,
                  notify-stub-deploy,
                  exception-manager-build,
                  exception-manager-deploy,
                  toolbox-build,
                  toolbox-deploy,
                  database-monitor-deploy,
                  rabbitmonitor-deploy,
                  regional-counts-deploy]
  plan:
  - get: every-midnight
    trigger: true
    passed: ["CI Reset DB"]
  - get: acceptance-tests-master
    passed: ["Build Acceptance Tests Latest"]
  - get: action-scheduler-master
    passed: ["CI Deploy Action-Scheduler"]
  - get: action-worker-master
    passed: ["CI Deploy Action-Worker"]
  - get: case-api-master
    passed: ["CI Deploy Case-API"]
  - get: case-processor-master
    passed: ["CI Deploy Case-Processor"]
  - get: uac-qid-service-master
    passed: ["CI Deploy UAC QID Service"]
  - get: pubsub-adapter
    passed: ["CI Deploy PubSub Adapter"]
  - get: qid-batch-runner-master
  - get: print-file-service-master
    passed: ["CI Deploy Print File Service"]
  - get: fieldwork-adapter-master
    passed: ["CI Deploy Fieldwork Adapter"]
  - get: notify-processor-master
    passed: ["CI Deploy Notify Processor"]
  - get: notify-stub-master
    passed: ["CI Deploy Notify Stub"]
  - get: exception-manager-master
    passed: ["CI Deploy Exception Manager"]
  - get: toolbox-master
    passed: ["CI Deploy Toolbox",
             "CI Deploy Database Monitor",
             "CI Deploy Rabbit Monitor",
             "CI Deploy Regional Counts"]
  - task: "Run Regression Acceptance Tests (in K8s)"
    file: acceptance-tests-master/tasks/kubectl-run-regression-acceptance-tests.yml
    on_failure: *slack_failure_alert_ci
    on_error: *slack_error_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      ACCEPTANCE_TESTS_IMAGE: ((acceptance-tests-image))
      BATCH_RUNNER_CONFIG: batch-runner-repo/qid-batch-runner.yml
    input_mapping: {acceptance-tests-repo: acceptance-tests-master,
                    batch-runner-repo: qid-batch-runner-master}

# WL Terraform
- name: "WL Terraform"
  serial: true
  serial_groups: [wl-terraform,
                  wl-database-patches,
                  wl-action-scheduler,
                  wl-action-worker,
                  wl-case-api,
                  wl-case-processor,
                  wl-uac-qid-service,
                  wl-pubsub-adapter,
                  wl-print-file-service,
                  wl-fieldwork-adapter,
                  wl-notify-processor,
                  wl-exception-manager,
                  wl-toolbox,
                  wl-database-monitor,
                  wl-rabbitmonitor,
                  wl-regional-counts]
  on_failure: *slack_failure_alert_wl
  on_error: *slack_error_alert_wl
  plan:
    - get: census-rm-terraform
      trigger: true
      passed: ["CI Acceptance Tests"]
    - get: census-rm-deploy
    - *slack_started_alert_wl
    - task: "WL Terraform"
      file: census-rm-deploy/tasks/terraform-env.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: whitelodge
        VAR_FILE: ./tfvars/census-rm-whitelodge.tfvars
        KUBERNETES_CLUSTER: rm-k8s-cluster
      input_mapping: {census-rm-terraform: census-rm-terraform}

# Deploy monitoring apps
- name: "WL Monitoring"
  serial: true
  serial_groups: [wl-terraform,
                  wl-action-scheduler,
                  wl-action-worker,
                  wl-case-api,
                  wl-case-processor,
                  wl-uac-qid-service,
                  wl-pubsub-adapter,
                  wl-print-file-service,
                  wl-fieldwork-adapter,
                  wl-notify-processor,
                  wl-exception-manager,
                  wl-toolbox,
                  wl-database-monitor,
                  wl-rabbitmonitor,
                  wl-regional-counts]
  on_failure: *slack_failure_alert_wl
  on_error: *slack_error_alert_wl
  plan:
    - get: census-rm-kubernetes-monitoring-repo
      trigger: true
    - get: census-rm-deploy
    - get: census-rm-terraform
      passed: ["WL Terraform"]
    - task: "WL Monitoring"
      file: census-rm-deploy/tasks/monitoring.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: whitelodge
        KUBERNETES_CLUSTER: rm-k8s-cluster
        PROMETHEUS_CONFIG_VALUES_FILE: monitoring/prometheus-values.yml
        GRAFANA_CONFIG_VALUES_FILE: monitoring/grafana-deployment.yml
      input_mapping: {census-rm-kubernetes-monitoring-repo: census-rm-kubernetes-monitoring-repo}

# WL Helm
- name: "WL Helm"
  serial: true
  serial_groups: [wl-terraform,
                  wl-database-patches,
                  wl-action-scheduler,
                  wl-action-worker,
                  wl-case-api,
                  wl-case-processor,
                  wl-uac-qid-service,
                  wl-pubsub-adapter,
                  wl-print-file-service,
                  wl-fieldwork-adapter,
                  wl-notify-processor,
                  wl-exception-manager,
                  wl-toolbox,
                  wl-database-monitor,
                  wl-rabbitmonitor,
                  wl-regional-counts]
  on_failure: *slack_failure_alert_wl
  on_error: *slack_error_alert_wl
  plan:
    - get: census-rm-kubernetes-dependencies-repo
      trigger: true
      passed: ["CI Acceptance Tests"]
    - get: census-rm-deploy
    - *slack_started_alert_wl
    - task: "WL Helm"
      file: census-rm-deploy/tasks/helm.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: whitelodge
        KUBERNETES_CLUSTER: rm-k8s-cluster
        RABBITMQ_CONFIG_VALUES_FILE: rabbitmq/values.yml
      input_mapping: {census-rm-kubernetes-dependencies-repo: census-rm-kubernetes-dependencies-repo}

# Apply Database Patches
- name: "WL Apply Database Patches"
  serial: true
  serial_groups: [wl-database-patches,
                  wl-terraform,
                  wl-action-scheduler,
                  wl-action-worker,
                  wl-case-api,
                  wl-case-processor,
                  wl-uac-qid-service,
                  wl-pubsub-adapter,
                  wl-print-file-service,
                  wl-fieldwork-adapter,
                  wl-notify-processor,
                  wl-exception-manager,
                  wl-toolbox,
                  wl-database-monitor,
                  wl-rabbitmonitor,
                  wl-regional-counts]
  on_failure: *slack_failure_alert_wl
  on_error: *slack_error_alert_wl
  plan:
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - get: census-rm-ddl-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: ddl-docker-image-gcr
    params:
      skip_download: true
  - task: apply-database-patches
    file: census-rm-deploy/tasks/kubectl-apply-ddl-patches.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-optional-repo}


# WL Deployments
- name: "WL Deploy Action-Scheduler"
  serial: true
  serial_groups: [wl-action-scheduler]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: action-scheduler-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: action-scheduler-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-scheduler-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Action-Worker"
  serial: true
  serial_groups: [wl-action-worker]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: action-worker-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: action-worker-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-worker
      KUBERNETES_SELECTOR: app=action-worker
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-worker
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-worker-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Print File Service"
  serial: true
  serial_groups: [wl-print-file-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: print-file-service-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: print-file-service-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-statefulset.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: print-file-service-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Case-API"
  serial: true
  serial_groups: [wl-case-api]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: case-api-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: case-api-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-api-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Case-Processor"
  serial: true
  serial_groups: [wl-case-processor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: case-processor-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: case-processor-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-processor-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy UAC QID Service"
  serial: true
  serial_groups: [wl-uac-qid-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: uac-qid-service-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: uac-qid-service-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: uac-qid-service-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy PubSub Adapter"
  serial: true
  serial_groups: [wl-pubsub-adapter]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: pubsub-adapter
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: pubsub-adapter-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsub-adapter
      KUBERNETES_SELECTOR: app=pubsub-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: pubsub-adapter-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Ops Tool"
  serial: true
  serial_groups: [wl-ops-tool]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-ops-repo
    trigger: true
  - get: ops-master
    trigger: true
  - get: ops-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: ops-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: "WL Deploy Fieldwork Adapter"
  serial: true
  serial_groups: [wl-fieldwork-adapter]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: fieldwork-adapter-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: fieldwork-adapter-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: fieldwork-adapter-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Notify Processor"
  serial: true
  serial_groups: [wl-notify-processor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: notify-processor-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: notify-processor-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: notify-processor-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Exception Manager"
  serial: true
  serial_groups: [wl-exception-manager]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: exception-manager-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: exception-manager-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: exception-manager-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "WL Deploy Toolbox"
  serial: true
  serial_groups: [wl-toolbox]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "WL Deploy Database Monitor"
  serial: true
  serial_groups: [wl-database-monitor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: database-monitor
      KUBERNETES_SELECTOR: app=database-monitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: database-monitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "WL Deploy Rabbit Monitor"
  serial: true
  serial_groups: [wl-rabbitmonitor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "WL Deploy Regional Counts"
  serial: true
  serial_groups: [wl-regional-counts]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-ddl-master
    trigger: true
    passed: ["WL Apply Database Patches"]
  - get: census-rm-kubernetes-optional-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-master
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: toolbox-docker-image-gcr
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: regionalcounts
      KUBERNETES_SELECTOR: app=regionalcounts
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: regional-counts
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: toolbox-docker-image-gcr,
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "WL Whitelist"
  serial: true
  serial_groups: [wl-whitelist]
  plan:
  - get: case-api-master
    trigger: true
    passed: ["WL Deploy Case-API"]
  - get: census-rm-terraform
    trigger: true
    passed: ["WL Terraform"]
  - get: census-rm-kubernetes-dependencies-repo
    trigger: true
    passed: ["WL Helm"]
  - get: census-rm-kubernetes-ops-repo
    trigger: true
    passed: ["WL Deploy Ops Tool"]
  - get: ops-master
    trigger: true
    passed: ["WL Deploy Ops Tool"]
  - get: whitelist-master
    trigger: true
  - get: census-rm-deploy
  - task: apply-whitelist
    file: census-rm-deploy/tasks/whitelist-env.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
    input_mapping: {
      census-rm-whitelist: whitelist-master
      }

- name: "WL Whitelist Nightly"
  plan:
  - get: every-midnight
    trigger: true
  - get: whitelist-master
  - get: census-rm-deploy
  - task: apply-whitelist
    file: census-rm-deploy/tasks/whitelist-env.yml
    on_failure: *slack_failure_alert_wl
    on_error: *slack_error_alert_wl
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((wl-gcp-project-name))
      KUBERNETES_CLUSTER: ((wl-kubernetes-cluster-name))
    input_mapping: {
      census-rm-whitelist: whitelist-master
      }
