---
resource_types:
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.13"

resources:
- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github-private-key))
    paths: [microservices/*]

- name: census-rm-kubernetes-handlers-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github-private-key))
    paths: [handlers/*]

- name: actionsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-actionsvc

- name: actionexportersvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-actionexportersvc

- name: casesvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-casesvc

- name: collectionexercisesvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-collectionexercisesvc

- name: collectioninstrumentsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-collectioninstrumentsvc

- name: commstemplatesvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-commstemplatesvc

- name: iacsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-iacsvc

- name: notifygatewaysvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-notifygatewaysvc

- name: samplesvc-docker-latest  # TODO change to census stub
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-samplesvc

- name: surveysvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-surveysvc

- name: fwmtjobsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-fwmtjobsvc

- name: fwmtrmadapter-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-fwmtrmadapter

- name: partysvc-stub-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-ci/census-rm-partysvcstub

jobs:

# Kubernetes Config
- name: deploy-microservices
  serial: true
  serial_groups: [actionsvc, casesvc, collectionexercisesvc, collectioninstrumentsvc, commstemplatesvc, iacsvc, samplesvc, surveysvc, partysvc-stub]
  plan:
  - get: actionsvc-docker-latest
    params:
      skip_download: true
  - get: casesvc-docker-latest
    params:
      skip_download: true
  - get: collectionexercisesvc-docker-latest
    params:
      skip_download: true
  - get: collectioninstrumentsvc-docker-latest
    params:
      skip_download: true
  - get: commstemplatesvc-docker-latest
    params:
      skip_download: true
  - get: iacsvc-docker-latest
    params:
      skip_download: true
  - get: samplesvc-docker-latest
    params:
      skip_download: true
  - get: surveysvc-docker-latest
    params:
      skip_download: true
  - get: partysvc-stub-docker-latest
    params:
      skip_download: true
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - task: deploy-rm
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      inputs:
      - name: census-rm-kubernetes-microservices-repo
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Deploy RM microservices
            kubectl apply -f census-rm-kubernetes-microservices-repo/microservices/ --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: deploy-handlers
  serial: true
  serial_groups: [actionexportersvc, fwmtjobsvc, fwmtadaptersvc, notifygatewaysvc]
  plan:
  - get: actionexportersvc-docker-latest
    params:
      skip_download: true
  - get: fwmtjobsvc-docker-latest
    params:
      skip_download: true
  - get: fwmtrmadapter-docker-latest
    params:
      skip_download: true
  - get: notifygatewaysvc-docker-latest
    params:
      skip_download: true
  - get: census-rm-kubernetes-handlers-repo
    trigger: true
  - task: deploy-rm
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      inputs:
      - name: census-rm-kubernetes-handlers-repo
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Deploy RM handlers
            kubectl apply -f census-rm-kubernetes-handlers-repo/handlers/ --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -o wide --namespace=${KUBERNETES_NAMESPACE}


# Patch to trigger Kubernetes image pull on new latest tag builds
- name: actionsvc-deploy-latest
  serial: true
  serial_groups: [actionsvc]
  plan:
  - get: actionsvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment actionsvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat actionsvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=actionsvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: actionexportersvc-deploy-latest
  serial: true
  serial_groups: [actionexportersvc]
  plan:
  - get: actionexportersvc-docker-latest
    trigger: true
    passed: [deploy-handlers]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment actionexportersvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat actionexportersvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=actionexportersvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: casesvc-deploy-latest
  serial: true
  serial_groups: [casesvc]
  plan:
  - get: casesvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment casesvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat casesvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=casesvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: collectionexercisesvc-deploy-latest
  serial: true
  serial_groups: [collectionexercisesvc]
  plan:
  - get: collectionexercisesvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment collectionexercisesvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat collectionexercisesvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=collectionexercisesvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: collectioninstrumentsvc-deploy-latest
  serial: true
  serial_groups: [collectioninstrumentsvc]
  plan:
  - get: collectioninstrumentsvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment collectioninstrumentsvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat collectioninstrumentsvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=collectioninstrumentsvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: commstemplatesvc-deploy-latest
  serial: true
  serial_groups: [commstemplatesvc]
  plan:
  - get: commstemplatesvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment commstemplatesvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat commstemplatesvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=commstemplatesvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: iacsvc-deploy-latest
  serial: true
  serial_groups: [iacsvc]
  plan:
  - get: iacsvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment iacsvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat iacsvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=iacsvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: notifygatewaysvc-deploy-latest
  serial: true
  serial_groups: [notifygatewaysvc]
  plan:
  - get: notifygatewaysvc-docker-latest
    trigger: true
    passed: [deploy-handlers]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment notifygatewaysvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat notifygatewaysvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=notifygatewaysvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: samplesvc-deploy-latest
  serial: true
  serial_groups: [samplesvc]
  plan:
  - get: samplesvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment samplesvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat samplesvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=samplesvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: surveysvc-deploy-latest
  serial: true
  serial_groups: [surveysvc]
  plan:
  - get: surveysvc-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment surveysvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat surveysvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=surveysvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: fwmtjobsvc-deploy-latest
  serial: true
  serial_groups: [fwmtjobsvc]
  plan:
  - get: fwmtjobsvc-docker-latest
    trigger: true
    passed: [deploy-handlers]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment fwmtgatewayjobsvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat fwmtjobsvc-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=fwmtgatewayjobsvc -o wide --namespace=${KUBERNETES_NAMESPACE}

- name: fwmtrmadapter-deploy-latest
  serial: true
  serial_groups: [fwmtadaptersvc]
  plan:
  - get: fwmtrmadapter-docker-latest
    trigger: true
    passed: [deploy-handlers]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment fwmtgatewayrmadapter -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat fwmtrmadapter-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=fwmtgatewayrmadapter -o wide --namespace=${KUBERNETES_NAMESPACE}


- name: partysvc-stub-deploy-latest
  serial: true
  serial_groups: [partysvc-stub]
  plan:
  - get: partysvc-stub-docker-latest
    trigger: true
    passed: [deploy-microservices]
    params:
      skip_download: true
  - task: patch-to-pull-latest-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: slim
      params:
        SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
        GCP_PROJECT_NAME: ((gcp-project-name))
        KUBERNETES_NAMESPACE: ((kubernetes-namespace))
        KUBERNETES_CLUSTER_NAME: ((kubernetes-cluster-name))
      run:
        path: sh
        args:
          - -exc
          - |
            apt install kubectl

            cat >~/gcloud-service-key.json <<EOL
            $SERVICE_ACCOUNT_JSON
            EOL

            # Use gcloud service account to configure kubectl
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud container clusters get-credentials ${KUBERNETES_CLUSTER_NAME} --zone europe-west2 --project ${GCP_PROJECT_NAME}

            # Patch a timestamp and image digest label to trigger an image pull
            kubectl patch deployment partysvc -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"timestamp\":\"`date +'%s'`\",\"image-digest\":\"$(cat partysvc-stub-docker-latest/digest | cut -d':' -f2 | cut -c1-60)\"}}}}}" --namespace=${KUBERNETES_NAMESPACE}

            # Get deployment status
            kubectl get deployments -l app=partysvc -o wide --namespace=${KUBERNETES_NAMESPACE}
