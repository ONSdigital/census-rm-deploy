---
resources:
- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github-private-key))

- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github-private-key))
    paths: [microservices/*]

- name: census-rm-kubernetes-handlers-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github-private-key))
    paths: [handlers/*]

- name: census-rm-kubernetes-ops-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github-private-key))
    paths: [optional/ops-*]

- name: acceptance-tests-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-acceptance-tests.git
    private_key: ((github-private-key))
    paths: [kubernetes.env, tasks/*]

- name: acceptance-tests-docker-image
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-acceptance-tests
    username: _json_key
    password: ((gcp-service-account-json))

- name: actionsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-actionsvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: actionexportersvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-actionexportersvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: casesvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-casesvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: collectionexercisesvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-collectionexercisesvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: collectioninstrumentsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-collectioninstrumentsvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: iacsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-iacsvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: samplesvc-stub-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-samplesvc-stub
    username: _json_key
    password: ((gcp-service-account-json))

- name: surveysvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-surveysvc
    username: _json_key
    password: ((gcp-service-account-json))

- name: partysvc-stub-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-partysvc-stub
    username: _json_key
    password: ((gcp-service-account-json))

- name: pubsubsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-pubsub
    username: _json_key
    password: ((gcp-service-account-json))

- name: ops-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-rm-ci/rm/census-rm-ops
    username: _json_key
    password: ((gcp-service-account-json))

jobs:

# Kubernetes Config
- name: actionsvc-apply-config
  serial: true
  serial_groups: [actionsvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: actionsvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: actionsvc
      KUBERNETES_SELECTOR: app=actionsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: actionexportersvc-apply-config
  serial: true
  serial_groups: [actionexportersvc]
  plan:
  - get: census-rm-kubernetes-handlers-repo
    trigger: true
  - get: actionexportersvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: actionexportersvc
      KUBERNETES_SELECTOR: app=actionexportersvc
      KUBERNETES_FILE_PATH: kubernetes-repo/handlers
      KUBERNETES_FILE_PREFIX: actionexporter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-handlers-repo}

- name: casesvc-apply-config
  serial: true
  serial_groups: [casesvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: casesvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: casesvc
      KUBERNETES_SELECTOR: app=casesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: collectionexercisesvc-apply-config
  serial: true
  serial_groups: [collectionexercisesvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: collectionexercisesvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: collectionexercisesvc
      KUBERNETES_SELECTOR: app=collectionexercisesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: collectionexercise
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: collectioninstrumentsvc-apply-config
  serial: true
  serial_groups: [collectioninstrumentsvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: collectioninstrumentsvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: collectioninstrumentsvc
      KUBERNETES_SELECTOR: app=collectioninstrumentsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: collectioninstrument
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: iacsvc-apply-config
  serial: true
  serial_groups: [iacsvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: iacsvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: iacsvc
      KUBERNETES_SELECTOR: app=iacsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: iac
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: samplesvc-stub-apply-config
  serial: true
  serial_groups: [samplesvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: samplesvc-stub-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: samplesvc-stub
      KUBERNETES_SELECTOR: app=samplesvc-stub
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: sample-stub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: surveysvc-apply-config
  serial: true
  serial_groups: [surveysvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: surveysvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: surveysvc
      KUBERNETES_SELECTOR: app=surveysvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: survey
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: partysvc-stub-apply-config
  serial: true
  serial_groups: [partysvc-stub]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: partysvc-stub-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: partysvc
      KUBERNETES_SELECTOR: app=partysvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: party
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: pubsubsvc-apply-config
  serial: true
  serial_groups: [pubsubsvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: pubsubsvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: ops-apply-config
  serial: true
  serial_groups: [ops]
  plan:
  - get: census-rm-kubernetes-ops-repo
    trigger: true
  - get: ops-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-ops-repo}

# Patch to trigger Kubernetes image pull on new latest tag builds
- name: actionsvc-deploy-latest
  serial: true
  serial_groups: [actionsvc]
  plan:
  - get: actionsvc-docker-latest
    trigger: true
    passed: [actionsvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: actionsvc
      KUBERNETES_SELECTOR: app=actionsvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: actionsvc-docker-latest}

- name: actionexportersvc-deploy-latest
  serial: true
  serial_groups: [actionexportersvc]
  plan:
  - get: actionexportersvc-docker-latest
    trigger: true
    passed: [actionexportersvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: actionexportersvc
      KUBERNETES_SELECTOR: app=actionexportersvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: actionexportersvc-docker-latest}

- name: casesvc-deploy-latest
  serial: true
  serial_groups: [casesvc]
  plan:
  - get: casesvc-docker-latest
    trigger: true
    passed: [casesvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: casesvc
      KUBERNETES_SELECTOR: app=casesvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: casesvc-docker-latest}

- name: collectionexercisesvc-deploy-latest
  serial: true
  serial_groups: [collectionexercisesvc]
  plan:
  - get: collectionexercisesvc-docker-latest
    trigger: true
    passed: [collectionexercisesvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: collectionexercisesvc
      KUBERNETES_SELECTOR: app=collectionexercisesvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: collectionexercisesvc-docker-latest}

- name: collectioninstrumentsvc-deploy-latest
  serial: true
  serial_groups: [collectioninstrumentsvc]
  plan:
  - get: collectioninstrumentsvc-docker-latest
    trigger: true
    passed: [collectioninstrumentsvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: collectioninstrumentsvc
      KUBERNETES_SELECTOR: app=collectioninstrumentsvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 60s
    input_mapping: {docker-image-resource: collectioninstrumentsvc-docker-latest}

- name: iacsvc-deploy-latest
  serial: true
  serial_groups: [iacsvc]
  plan:
  - get: iacsvc-docker-latest
    trigger: true
    passed: [iacsvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: iacsvc
      KUBERNETES_SELECTOR: app=iacsvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: iacsvc-docker-latest}

- name: samplesvc-stub-deploy-latest
  serial: true
  serial_groups: [samplesvc]
  plan:
  - get: samplesvc-stub-docker-latest
    trigger: true
    passed: [samplesvc-stub-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: samplesvc-stub
      KUBERNETES_SELECTOR: app=samplesvc-stub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: samplesvc-stub-docker-latest}

- name: surveysvc-deploy-latest
  serial: true
  serial_groups: [surveysvc]
  plan:
  - get: surveysvc-docker-latest
    trigger: true
    passed: [surveysvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: surveysvc
      KUBERNETES_SELECTOR: app=surveysvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 60s
    input_mapping: {docker-image-resource: surveysvc-docker-latest}

- name: partysvc-stub-deploy-latest
  serial: true
  serial_groups: [partysvc-stub]
  plan:
  - get: partysvc-stub-docker-latest
    trigger: true
    passed: [partysvc-stub-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: partysvc
      KUBERNETES_SELECTOR: app=partysvc-stub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 60s
    input_mapping: {docker-image-resource: partysvc-stub-docker-latest}

- name: pubsubsvc-deploy-latest
  serial: true
  serial_groups: [pubsubsvc]
  plan:
  - get: pubsubsvc-docker-latest
    trigger: true
    passed: [pubsubsvc-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: pubsubsvc-docker-latest}

- name: ops-deploy-latest
  serial: true
  serial_groups: [ops]
  plan:
  - get: ops-docker-latest
    trigger: true
    passed: [ops-apply-config]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: patch-to-pull-latest-image
    file: census-rm-deploy/tasks/kubectl-patch-to-latest.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {docker-image-resource: ops-docker-latest}


- name: "Acceptance Tests"
  serial: true
  serial_groups: [actionsvc, actionexportersvc, casesvc, collectionexercisesvc, collectioninstrumentsvc, iacsvc, samplesvc, surveysvc, partysvc-stub, pubsubsvc]
  plan:
  - get: acceptance-tests-repo
  - get: acceptance-tests-docker-image
    trigger: true
    params:
      skip_download: true
  - get: census-rm-kubernetes-handlers-repo
    trigger: true
    passed: [actionexportersvc-apply-config]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: [actionsvc-apply-config, collectionexercisesvc-apply-config, collectioninstrumentsvc-apply-config, iacsvc-apply-config, samplesvc-stub-apply-config, surveysvc-apply-config, partysvc-stub-apply-config, pubsubsvc-apply-config]
  - get: actionsvc-docker-latest
    trigger: true
    passed: [actionsvc-deploy-latest]
    params:
      skip_download: true
  - get: actionexportersvc-docker-latest
    trigger: true
    passed: [actionexportersvc-deploy-latest]
    params:
      skip_download: true
  - get: casesvc-docker-latest
    trigger: true
    passed: [casesvc-deploy-latest]
    params:
      skip_download: true
  - get: collectionexercisesvc-docker-latest
    trigger: true
    passed: [collectionexercisesvc-deploy-latest]
    params:
      skip_download: true
  - get: collectioninstrumentsvc-docker-latest
    trigger: true
    passed: [collectioninstrumentsvc-deploy-latest]
    params:
      skip_download: true
  - get: iacsvc-docker-latest
    trigger: true
    passed: [iacsvc-deploy-latest]
    params:
      skip_download: true
  - get: samplesvc-stub-docker-latest
    trigger: true
    passed: [samplesvc-stub-deploy-latest]
    params:
      skip_download: true
  - get: surveysvc-docker-latest
    trigger: true
    passed: [surveysvc-deploy-latest]
    params:
      skip_download: true
  - get: partysvc-stub-docker-latest
    trigger: true
    passed: [partysvc-stub-deploy-latest]
    params:
      skip_download: true
  - get: pubsubsvc-docker-latest
    trigger: true
    passed: [pubsubsvc-deploy-latest]
    params:
      skip_download: true
  - task: "Run Acceptance Tests (in K8s)"
    file: acceptance-tests-repo/tasks/kubectl-run-acceptance-tests.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_NAMESPACE: ((kubernetes-namespace))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
    input_mapping: {acceptance-tests-repo: acceptance-tests-repo}
