---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))

- name: census-rm-terraform
  type: git
  source:
    branch: ((terraform-branch))
    uri: git@github.com:ONSdigital/census-rm-terraform.git
    private_key: ((github.service_account_private_key))

- name: batch-runner-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-qid-batch-runner.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [microservices/*]

- name: census-rm-kubernetes-ops-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [optional/ops-*]

- name: acceptance-tests-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-acceptance-tests.git
    private_key: ((github.service_account_private_key))
    paths: [kubernetes.env, tasks/*]

- name: acceptance-tests-docker-image
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-acceptance-tests
    username: _json_key
    password: ((gcp.service_account_json))

- name: action-scheduler-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-action-scheduler
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-api-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-case-api
    username: _json_key
    password: ((gcp.service_account_json))

- name: case-processor-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-case-processor
    username: _json_key
    password: ((gcp.service_account_json))

- name: uac-qid-service-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-uac-qid-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: pubsubsvc-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-pubsub
    username: _json_key
    password: ((gcp.service_account_json))

- name: ops-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-ops
    username: _json_key
    password: ((gcp.service_account_json))

- name: qid-batch-runner-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-qid-batch-runner
    username: _json_key
    password: ((gcp.service_account_json))

- name: print-file-service-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-print-file-service
    username: _json_key
    password: ((gcp.service_account_json))

- name: fieldwork-adapter-docker-latest
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr-rm/rm/census-rm-fieldwork-adapter
    username: _json_key
    password: ((gcp.service_account_json))

templating:

slack_failure_alert_ci: &slack_failure_alert_ci
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((ci-gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((ci-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_failure_alert_sit: &slack_failure_alert_sit
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((sit-gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((sit-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_success_alert_ci: &slack_success_alert_ci
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME succeeded",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((ci-gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((ci-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_started_alert_ci: &slack_started_alert_ci
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME started... See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME started...",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((ci-gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((ci-gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#36a64f"
          }
      ]


jobs:

# CI
- name: "CI Deploy Infrastructure"
  serial: true
  serial_groups: [ci-action-scheduler, ci-case-api, ci-case-processor, ci-uac-qid-service, ci-ops-tool, ci-pubsubsvc, ci-print-file-service, ci-fieldwork-adapter]
  max_in_flight: 1
  plan:
  - get: census-rm-terraform
    trigger: true
  - get: census-rm-kubernetes-repo
  - *slack_started_alert_ci
  - task: "Build & Deploy Infrastructure"
    on_success: *slack_success_alert_ci
    on_failure: *slack_failure_alert_ci
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        AUTO_APPLY: true
        DEV_DUMMY_PGP: true
        DEV_PUBSUB: true
        DISABLE_CI_BINDING: true
        ENV: ((ci-gcp-environment-name))
        GOOGLE_APPLICATION_CREDENTIALS: /root/gcloud-service-key.json
        KEEP_TMP_K8S: true
        SKIP_DEPLOYMENTS: true
      inputs:
        - name: census-rm-terraform
        - name: census-rm-kubernetes-repo
      run:
        path: bash
        args:
          - -exc
          - |
            apt-get install -y unzip procps  # NB: procps is used by Helm
            git clone https://github.com/kamatama41/tfenv.git ~/.tfenv && \
            ln -s /root/.tfenv/bin/* /usr/local/bin
            cat >$GOOGLE_APPLICATION_CREDENTIALS <<EOL
            $ADMIN_SERVICE_ACCOUNT_JSON
            EOL
            gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
            cp -R census-rm-kubernetes-repo/ census-rm-terraform/tmp_rm_kube
            cd census-rm-terraform
            tfenv install
            curl -L https://git.io/get_helm.sh | bash && \
            helm init --client-only && \
            helm plugin install https://github.com/rimusz/helm-tiller
            ./apply.sh


- name: "CI Deploy Action-Scheduler"
  serial: true
  serial_groups: [ci-action-scheduler]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: action-scheduler-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-scheduler-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Case-API"
  serial: true
  serial_groups: [ci-case-api]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: case-api-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-api-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Case-Processor"
  serial: true
  serial_groups: [ci-case-processor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: case-processor-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-processor-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy UAC QID Service"
  serial: true
  serial_groups: [ci-uac-qid-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: uac-qid-service-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: uac-qid-service-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy PubSub Service"
  serial: true
  serial_groups: [ci-pubsubsvc]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: pubsubsvc-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: pubsubsvc-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Ops Tool"
  serial: true
  serial_groups: [ci-ops-tool]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-ops-repo
    trigger: true
  - get: ops-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: ops-docker-latest,
      kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: "CI Deploy Print File Service"
  serial: true
  serial_groups: [ci-print-file-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: print-file-service-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: print-file-service-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Deploy Fieldwork Adapter"
  serial: true
  serial_groups: [ci-fieldwork-adapter]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Infrastructure"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
  - get: fieldwork-adapter-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: fieldwork-adapter-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "CI Acceptance Tests"
  serial: true
  serial_groups: [ci-action-scheduler, ci-case-api, ci-case-processor, ci-uac-qid-service, ci-pubsubsvc, ci-print-file-service, ci-fieldwork-adapter]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Deploy Action-Scheduler", 
             "CI Deploy Case-API", 
             "CI Deploy Case-Processor", 
             "CI Deploy UAC QID Service", 
             "CI Deploy PubSub Service",
             "CI Deploy Print File Service",
             "CI Deploy Fieldwork Adapter"]
  - get: acceptance-tests-repo
  - get: batch-runner-repo
  - get: acceptance-tests-docker-image
    trigger: true
    params:
      skip_download: true
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Deploy Action-Scheduler", 
             "CI Deploy Case-API", 
             "CI Deploy Case-Processor", 
             "CI Deploy UAC QID Service", 
             "CI Deploy PubSub Service",
             "CI Deploy Print File Service",
             "CI Deploy Fieldwork Adapter"]
  - get: action-scheduler-docker-latest
    trigger: true
    passed: ["CI Deploy Action-Scheduler"]
    params:
      skip_download: true
  - get: case-api-docker-latest
    trigger: true
    passed: ["CI Deploy Case-API"]
    params:
      skip_download: true
  - get: case-processor-docker-latest
    trigger: true
    passed: ["CI Deploy Case-Processor"]
    params:
      skip_download: true
  - get: uac-qid-service-docker-latest
    trigger: true
    passed: ["CI Deploy UAC QID Service"]
    params:
      skip_download: true
  - get: pubsubsvc-docker-latest
    trigger: true
    passed: ["CI Deploy PubSub Service"]
    params:
      skip_download: true
  - get: qid-batch-runner-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: print-file-service-docker-latest
    trigger: true
    passed: ["CI Deploy Print File Service"]
    params:
      skip_download: true
  - get: fieldwork-adapter-docker-latest
    trigger: true
    passed: ["CI Deploy Fieldwork Adapter"]
    params:
      skip_download: true
  - task: "Run Acceptance Tests (in K8s)"
    file: acceptance-tests-repo/tasks/kubectl-run-acceptance-tests.yml
    on_failure: *slack_failure_alert_ci
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((ci-gcp-project-name))
      KUBERNETES_CLUSTER: ((ci-kubernetes-cluster-name))
      ACCEPTANCE_TESTS_IMAGE: ((acceptance-tests-image))
      BATCH_RUNNER_CONFIG: batch-runner-repo/qid-batch-runner.yml
    input_mapping: {acceptance-tests-repo: acceptance-tests-repo}


# SIT 
- name: "SIT Deploy Action-Scheduler"
  serial: true
  serial_groups: [sit-action-scheduler]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: action-scheduler-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: action-scheduler-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy Print File Service"
  serial: true
  serial_groups: [sit-print-file-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: print-file-service-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-statefulset.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: print-file-service-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy Case-API"
  serial: true
  serial_groups: [sit-case-api]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: case-api-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-api-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy Case-Processor"
  serial: true
  serial_groups: [sit-case-processor]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: case-processor-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: case-processor-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy UAC QID Service"
  serial: true
  serial_groups: [sit-uac-qid-service]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: uac-qid-service-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: uac-qid-service-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy PubSub Service"
  serial: true
  serial_groups: [sit-pubsubsvc]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: pubsubsvc-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: pubsubsvc-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "SIT Deploy Ops Tool"
  serial: true
  serial_groups: [sit-ops-tool]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-ops-repo
    trigger: true
  - get: ops-docker-latest
    trigger: true
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: ops-docker-latest,
      kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: "SIT Deploy Fieldwork Adapter"
  serial: true
  serial_groups: [sit-fieldwork-adapter]
  plan:
  - get: census-rm-terraform
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: census-rm-kubernetes-microservices-repo
    trigger: true
    passed: ["CI Acceptance Tests"]
  - get: fieldwork-adapter-docker-latest
    trigger: true
    passed: ["CI Acceptance Tests"]
    params:
      skip_download: true
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    on_failure: *slack_failure_alert_sit
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((sit-gcp-project-name))
      KUBERNETES_CLUSTER: ((sit-kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      docker-image-resource: fieldwork-adapter-docker-latest,
      kubernetes-repo: census-rm-kubernetes-microservices-repo}
