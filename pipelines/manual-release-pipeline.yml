---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-release
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [release/*]
    tag_filter: v*.*.*
    branch: master

- name: every-minute
  type: time
  source:
    interval: 1m

templating:

slack_failure_alert: &slack_failure_alert
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "$BUILD_JOB_NAME failed. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "title": "$BUILD_JOB_NAME failed",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((gcp-project-name))",
                      "short": true
                  },
                  {
                      "title": "Build",
                      "value": "#$BUILD_NAME",
                      "short": true
                  }
              ],
              "color": "#F35A00"
          }
      ]

slack_success_alert: &slack_success_alert
  put: slack-alert
  params:
    icon_emoji: ":concourse:"
    username: Concourse
    attachments: [
          {
              "fallback": "((gcp-environment-name)) release succeeded. See build: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "title": "((gcp-environment-name)) Release Succeeded",
              "title_link": "$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME",
              "fields": [
                  {
                      "title": "Pipeline",
                      "value": "$BUILD_PIPELINE_NAME",
                      "short": true
                  },
                  {
                      "title": "Environment",
                      "value": "((gcp-environment-name))",
                      "short": true
                  },
                  {
                      "title": "Project",
                      "value": "((gcp-project-name))",
                      "short": true
                  }
              ],
              "color": "#36a64f"
          }
      ]


jobs:

- name: "Deploy"
  serial: true
  plan:
    - get: every-minute
    - get: census-rm-kubernetes-release

- name: "Action Scheduler"
  disable_manual_trigger: true
  serial: true
  serial_groups: [action-scheduler]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Case API"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-api]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Case Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [case-processor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "UAC QID Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [uac-qid-service]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "PubSub Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [pubsubsvc]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Ops Tool"
  disable_manual_trigger: true
  serial: true
  serial_groups: [ops]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Print File Service"
  disable_manual_trigger: true
  serial: true
  serial_groups: [print-file-service]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Fieldwork Adapter"
  disable_manual_trigger: true
  serial: true
  serial_groups: [fieldwork-adapter]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Notify Processor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [notify-processor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Exception Manager"
  disable_manual_trigger: true
  serial: true
  serial_groups: [exception-manager]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Toolbox"
  disable_manual_trigger: true
  serial: true
  serial_groups: [toolbox]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Event Latency Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [event-latency-monitor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: eventlatencymonitor
      KUBERNETES_SELECTOR: app=eventlatencymonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: eventlatencymonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Rabbit Monitor"
  disable_manual_trigger: true
  serial: true
  serial_groups: [rabbitmonitor]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Regional Counts"
  disable_manual_trigger: true
  serial: true
  serial_groups: [regionalcounts]
  plan:
  - get: census-rm-kubernetes-release
    trigger: true
    passed: ["Deploy"]
  - get: census-rm-deploy
  - get: every-minute
    trigger: true
    passed: ["Deploy"]
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    on_failure: *slack_failure_alert
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: regionalcounts
      KUBERNETES_SELECTOR: app=regionalcounts
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: regional-counts
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-release}

- name: "Report Success"
  disable_manual_trigger: true
  serial: true
  plan:
  - get: census-rm-kubernetes-release
  - get: every-minute
    trigger: true
    passed: ["Action Scheduler", 
    "Case API", 
    "Case Processor", 
    "UAC QID Service", 
    "PubSub Service",
    "Print File Service", 
    "Ops Tool",
     "Fieldwork Adapter", 
     "Notify Processor", 
     "Exception Manager", 
     "Toolbox", 
     "Event Latency Monitor", 
     "Rabbit Monitor", 
     "Regional Counts"]
  - *slack_success_alert
