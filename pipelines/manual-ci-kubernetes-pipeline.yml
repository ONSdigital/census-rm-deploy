---
resources:

- name: acceptance-tests-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-acceptance-tests.git
    private_key: ((github.service_account_private_key))
    paths: [kubernetes.env, tasks/*]

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [release/microservices/*]
    tag_filter: ((kubernetes-release))

- name: census-rm-kubernetes-ops-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [release/optional/ops-*]
    tag_filter: ((kubernetes-release))


jobs:

# Kubernetes Config
- name: action-scheduler
  serial: true
  serial_groups: [action-scheduler]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: case-api
  serial: true
  serial_groups: [case-api]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-api
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: case-processor
  serial: true
  serial_groups: [case-processor]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: uac-qid-service
  serial: true
  serial_groups: [uac-qid-service]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: pubsubsvc
  serial: true
  serial_groups: [pubsubsvc]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsubsvc
      KUBERNETES_SELECTOR: app=pubsubsvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: pubsub
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: ops
  serial: true
  serial_groups: [ops]
  plan:
  - get: census-rm-kubernetes-ops-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/release/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: print-file-service
  serial: true
  serial_groups: [print-file-service]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-statefulset.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/release/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      SKIP_IMAGE_PATCH: true
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: fieldwork-adapter
  serial: true
  serial_groups: [fieldwork-adapter]
  plan:
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-microservices-repo}


- name: "Acceptance Tests"
  serial: true
  serial_groups: [action-scheduler, case-api, case-processor, uac-qid-service, pubsubsvc, print-file-service, fieldwork-adapter]
  plan:
  - get: acceptance-tests-repo
  - get: census-rm-kubernetes-microservices-repo
    passed: [action-scheduler, case-api, case-processor, uac-qid-service, pubsubsvc, print-file-service, fieldwork-adapter]
  - task: "Run Acceptance Tests (in K8s)"
    file: acceptance-tests-repo/tasks/kubectl-run-acceptance-tests.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      ACCEPTANCE_TESTS_IMAGE: ((acceptance-tests-image))
      BATCH_RUNNER_CONFIG: census-rm-kubernetes-microservices-repo/release/microservices/qid-batch-runner-deployment.yml
    input_mapping: {acceptance-tests-repo: acceptance-tests-repo}
