resources:

- name: census-rm-deploy
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-deploy.git
    private_key: ((github.service_account_private_key))

- name: census-rm-kubernetes-microservices-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [microservices/*]

- name: every-minute
  type: time
  source:
    interval: 1m

- name: census-rm-kubernetes-optional-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [optional/*]

- name: census-rm-kubernetes-dependencies-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [rabbitmq/*, setup-rabbitmq.sh, rabbitmq-install.sh, rabbitmq-update.sh]

- name: census-rm-kubernetes-monitoring-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [monitoring/*, grafana-dashboards/*, setup-monitoring.sh]

- name: census-rm-terraform
  type: git
  source:
    branch: ((terraform-branch))
    uri: git@github.com:ONSdigital/census-rm-terraform.git
    private_key: ((github.service_account_private_key))


- name: census-rm-kubernetes-ops-repo
  type: git
  source:
    uri: git@github.com:ONSdigital/census-rm-kubernetes.git
    private_key: ((github.service_account_private_key))
    paths: [optional/ops-*]

jobs:

# Terraform
- name: "Terraform"
  serial: true
  serial_groups: [terraform,
                  database-patches,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  fieldwork-adapter,
                  notify-processor,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  regional-counts,
                  ops-ui]
  plan:
  - get: every-minute
  - get: census-rm-deploy
  - get: census-rm-terraform
  - task: "Terraform"
    file: census-rm-deploy/tasks/terraform-env.yml
    attempts: 3
    params:
      ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      ENV: ((gcp-environment-name))
      VAR_FILE: ./tfvars/census-rm-ryangrundy.tfvars
      KUBERNETES_CLUSTER: rm-k8s-cluster
    input_mapping: {census-rm-terraform: census-rm-terraform}



- name: "Preview Terraform Changes"
  plan:
  - get: census-rm-terraform
  - get: census-rm-deploy
  - task: "Preview Terraform Changes"
    file: census-rm-deploy/tasks/preview-changes-terraform-env.yml
    params:
      ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      ENV: ((gcp-environment-name))
      VAR_FILE: ./tfvars/((gcp-project-name)).tfvars
      KUBERNETES_CLUSTER: rm-k8s-cluster
    input_mapping: {census-rm-terraform: census-rm-terraform}


# Deploy monitoring apps
- name: "Monitoring"
  serial: true
  serial_groups: [terraform,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  fieldwork-adapter,
                  notify-processor,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  regional-counts]

  plan:
    - get: census-rm-kubernetes-monitoring-repo
      trigger: true
    - get: census-rm-deploy
    - get: every-minute
      passed: ["Terraform"]
      trigger: true
    - get: census-rm-terraform
    - task: "Monitoring"
      file: census-rm-deploy/tasks/monitoring.yml
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: ((gcp-environment-name))
        KUBERNETES_CLUSTER: rm-k8s-cluster
        PROMETHEUS_CONFIG_VALUES_FILE: monitoring/prometheus-values.yml
        GRAFANA_CONFIG_VALUES_FILE: monitoring/grafana-deployment.yml
      input_mapping: {census-rm-kubernetes-monitoring-repo: census-rm-kubernetes-monitoring-repo}

# Rabbitmq
- name: "Rabbitmq"
  serial: true
  serial_groups: [terraform,
                  database-patches,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  fieldwork-adapter,
                  notify-processor,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  regional-counts,
                  ops-ui
                  ]

  plan:
    - get: census-rm-deploy
    - get: every-minute
      passed:
      - "Terraform"
      trigger: true
    - get: census-rm-kubernetes-dependencies-repo
    - task: "Rabbitmq"
      file: ((rabbitmq-file))
      params:
        ADMIN_SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
        ENV: ((gcp-environment-name))
        KUBERNETES_CLUSTER: rm-k8s-cluster
        RABBITMQ_PRODUCTION_SETUP: ((rabbitmq-production-setup))
      input_mapping: {census-rm-kubernetes-dependencies-repo: census-rm-kubernetes-dependencies-repo}

# Apply Database Patches
- name: "Apply Database Patches"
  serial: true
  serial_groups: [database-patches,
                  terraform,
                  action-scheduler,
                  action-worker,
                  action-processor,
                  case-api,
                  case-processor,
                  uac-qid-service,
                  pubsub-adapter,
                  print-file-service,
                  fieldwork-adapter,
                  notify-processor,
                  exception-manager,
                  toolbox,
                  database-monitor,
                  rabbitmonitor,
                  regional-counts,
                  ops-ui]

  plan:
  - get: census-rm-deploy
  - get: census-rm-kubernetes-optional-repo
  - get: every-minute
    passed: ["Rabbitmq"]
    trigger: true
  - task: apply-database-patches
    file: census-rm-deploy/tasks/kubectl-apply-ddl-patches.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {kubernetes-repo: census-rm-kubernetes-optional-repo}


# Deployments
- name: "Deploy Action-Scheduler"
  serial: true
  serial_groups: [action-scheduler]
  plan:
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-statefulset
    file: census-rm-deploy/tasks/kubectl-apply-service-and-statefulset-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: action-scheduler
      KUBERNETES_SELECTOR: app=action-scheduler
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-scheduler
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Action-Worker"
  serial: true
  serial_groups: [action-worker]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-worker
      KUBERNETES_SELECTOR: app=action-worker
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-worker
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Action-Processor"
  serial: true
  serial_groups: [action-processor]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: action-processor
      KUBERNETES_SELECTOR: app=action-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: action-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Print File Service"
  serial: true
  serial_groups: [print-file-service]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: printfilesvc
      KUBERNETES_SELECTOR: app=printfilesvc
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: print-file-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Case-API"
  serial: true
  serial_groups: [case-api]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-api
      KUBERNETES_SELECTOR: app=case-api
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-api
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Case-Processor"
  serial: true
  serial_groups: [case-processor]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: case-processor
      KUBERNETES_SELECTOR: app=case-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: case-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy UAC QID Service"
  serial: true
  serial_groups: [uac-qid-service]
  plan:
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-deploy
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: uacqidservice
      KUBERNETES_SELECTOR: app=uacqidservice
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: uac-qid-service
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy PubSub Adapter"
  serial: true
  serial_groups: [pubsub-adapter]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: pubsub-adapter
      KUBERNETES_SELECTOR: app=pubsub-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: pubsub-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Ops Tool"
  serial: true
  serial_groups: [ops-tool]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-deploy
  - get: census-rm-kubernetes-ops-repo
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops
      KUBERNETES_SELECTOR: app=ops
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: ops
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-ops-repo}

- name: "Deploy Ops UI"
  serial: true
  serial_groups: [ops-ui]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-service-and-deploy-no-patch.yml
    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: ops-ui
      KUBERNETES_SELECTOR: app=ops-ui
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: ops-ui
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Fieldwork Adapter"
  serial: true
  serial_groups: [fieldwork-adapter]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: fieldwork-adapter
      KUBERNETES_SELECTOR: app=fieldwork-adapter
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: fieldwork-adapter
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Notify Processor"
  serial: true
  serial_groups: [notify-processor]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: notify-processor
      KUBERNETES_SELECTOR: app=notify-processor
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: notify-processor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Exception Manager"
  serial: true
  serial_groups: [exception-manager]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-microservices-repo
  - get: census-rm-deploy
  - task: apply-service-and-statefulset
    file: census-rm-deploy/tasks/kubectl-apply-service-and-statefulset-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: exception-manager
      KUBERNETES_SELECTOR: app=exception-manager
      KUBERNETES_FILE_PATH: kubernetes-repo/microservices
      KUBERNETES_FILE_PREFIX: exception-manager
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-microservices-repo}

- name: "Deploy Toolbox"
  serial: true
  serial_groups: [toolbox]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - task: apply-statefulset
    file: census-rm-deploy/tasks/kubectl-apply-statefulset-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_STATEFULSET_NAME: census-rm-toolbox
      KUBERNETES_SELECTOR: app=census-rm-toolbox
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: census-rm-toolbox-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "Deploy Database Monitor"
  serial: true
  serial_groups: [database-monitor]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: database-monitor
      KUBERNETES_SELECTOR: app=database-monitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: database-monitor-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "Deploy Rabbit Monitor"
  serial: true
  serial_groups: [rabbitmonitor]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: rabbitmonitor
      KUBERNETES_SELECTOR: app=rabbitmonitor
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: rabbitmonitor
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-optional-repo}

- name: "Deploy Regional Counts"
  serial: true
  serial_groups: [regional-counts]
  plan:
  - get: census-rm-terraform
  - get: every-minute
    passed:
      - "Apply Database Patches"
    trigger: true
  - get: census-rm-kubernetes-dependencies-repo
  - get: census-rm-kubernetes-optional-repo
  - get: census-rm-deploy
  - task: apply-deployment
    file: census-rm-deploy/tasks/kubectl-apply-deployment-no-patch.yml

    params:
      SERVICE_ACCOUNT_JSON: ((gcp.service_account_json))
      GCP_PROJECT_NAME: ((gcp-project-name))
      KUBERNETES_CLUSTER: ((kubernetes-cluster-name))
      KUBERNETES_DEPLOYMENT_NAME: regionalcounts
      KUBERNETES_SELECTOR: app=regionalcounts
      KUBERNETES_FILE_PATH: kubernetes-repo/optional
      KUBERNETES_FILE_PREFIX: regional-counts-dev
      WAIT_UNTIL_AVAILABLE_TIMEOUT: 200s
    input_mapping: {
      kubernetes-repo: census-rm-kubernetes-optional-repo}